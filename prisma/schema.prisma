generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  cpf          String   @unique
  birthDate    DateTime
  email        String   @unique
  phone        String
  createdAt    DateTime @default(now())
  passwordHash String?

  resetTokens PasswordResetToken[]
  classes     Class[]            @relation("UserClasses")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
}

model Class {
  id          String       @id @default(cuid())
  name        String
  ownerId     String
  owner       User         @relation("UserClasses", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())

  attendances Attendance[]
  contents    Content[]
  students    Student[]
}

model Attendance {
  id        String   @id @default(cuid())
  classId   String
  cls       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  seq       Int
  title     String   @default("Chamada")
  createdAt DateTime @default(now())
  lessonDate DateTime?   // data editável da aula (UTC, opcional)

  @@unique([classId, seq])
}

model Content {
  id        String   @id @default(cuid())
  classId   String
  cls       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  seq       Int
  title     String   @default("Conteúdo")
  bodyHtml  String?  // futuro: editor; por enquanto pode ficar vazio
  createdAt DateTime @default(now())

  @@unique([classId, seq])
}

model Student {
  id        String   @id @default(cuid())
  classId   String
  cls       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  name      String
  cpf       String?
  contact   String?  // whatsapp/email/telefone
  createdAt DateTime @default(now())
}


/// Marcações de presença por aluno em uma chamada específica (classId+seq).

/// Marcações de presença por aluno em uma chamada específica (classId+seq).
model AttendancePresence {
  id        String   @id @default(cuid())
  classId   String
  seq       Int
  studentId String
  present   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Sem relações Prisma para não exigir back-relations agora.
  @@unique([classId, seq, studentId], name: "class_seq_student_unique")
  @@index([classId, seq], name: "class_seq_idx")
}
