
===== app/dashboard/page.tsx =====
1 "use client";
2 import { useEffect, useState } from "react";
3 import { useRouter } from "next/navigation";
4 import ClassCard from "./ClassCard";
5 
6 type Me = { ok: boolean; user?: { id: string; name: string; email: string } };
7 type Role = "PROFESSOR" | "GESTOR" | null;
8 type ClassItem = { id: string; name: string; createdAt: string; roleForMe: Role };
9 
10 export default function DashboardPage() {
11   const router = useRouter();
12   const [me, setMe] = useState<Me | null>(null);
13   const [loading, setLoading] = useState(true);
14   const [classes, setClasses] = useState<ClassItem[]>([]);
15   const [name, setName] = useState("");
16   const [err, setErr] = useState<string | null>(null);
17 
18   async function fetchMe() {
19     const res = await fetch("/api/auth/me", { cache: "no-store" });
20     if (res.status === 401) {
21       router.push("/login");
22       return;
23     }
24     const data: Me = await res.json();
25     setMe(data);
26   }
27 
28   async function fetchClasses() {
29     const res = await fetch("/api/classes", { cache: "no-store" });
30     if (res.status === 401) {
31       router.push("/login");
32       return;
33     }
34     const data = await res.json();
35     if (data?.ok) setClasses(data.classes || []);
36   }
37 
38   useEffect(() => {
39     (async () => {
40       await fetchMe();
41       await fetchClasses();
42       setLoading(false);
43     })();
44     // eslint-disable-next-line react-hooks/exhaustive-deps
45   }, []);
46 
47   async function onLogout() {
48     await fetch("/api/auth/logout", { method: "POST" });
49     router.push("/login");
50   }
51 
52   async function onCreateClass(e: React.FormEvent) {
53     e.preventDefault();
54     setErr(null);
55     const n = name.trim();
56     if (n.length < 2) {
57       setErr("Nome da turma muito curto.");
58       return;
59     }
60     const res = await fetch("/api/classes", {
61       method: "POST",
62       headers: { "content-type": "application/json" },
63       body: JSON.stringify({ name: n })
64     });
65     const data = await res.json();
66     if (!res.ok || !data?.ok) {
67       setErr(data?.error ?? "Erro ao criar turma");
68       return;
69     }
70     setName("");
71     await fetchClasses();
72   }
73 
74   if (loading) {
75     return <main className="min-h-screen flex items-center justify-center">Carregando...</main>;
76   }
77 
78   const firstName = me?.user?.name?.split(" ")[0] || "Olá";
79 
80   return (
81     <main className="min-h-screen p-6 lg:p-10">
82       <header className="flex items-center justify-between max-w-5xl mx-auto mb-8">
83         <div className="flex items-center gap-3">
84           <span className="inline-block h-4 w-4 rounded-full bg-[var(--color-brand-blue)]" />
85           <h1 className="text-2xl font-semibold">EDUCC • Dashboard</h1>
86         </div>
87         <button onClick={onLogout} className="btn-primary">Sair</button>
88       </header>
89 
90       <section className="max-w-5xl mx-auto">
91         <div className="card p-6 mb-8">
92           <h2 className="text-xl font-semibold">{firstName}, bem-vindo(a)!</h2>
93           <p className="text-gray-600">Gerencie suas turmas abaixo.</p>
94         </div>
95 
96         <div className="card p-6 mb-6">
97           <h3 className="font-semibold mb-3">Criar nova turma</h3>
98           <form onSubmit={onCreateClass} className="flex flex-col sm:flex-row gap-3">
99             <input
100               className="input flex-1"
101               type="text"
102               placeholder="Nome da turma"
103               value={name}
104               onChange={(e) => setName(e.target.value)}
105               required
106               minLength={2}
107             />
108             <button type="submit" className="btn-primary">Criar turma</button>
109           </form>
110           {err && <p className="text-sm text-red-600 mt-2">{err}</p>}
111         </div>
112 
113         <div className="card p-6">
114           <h3 className="font-semibold mb-4">Minhas turmas</h3>
115           {classes.length === 0 ? (
116             <p className="text-gray-600">Nenhuma turma cadastrada ainda.</p>
117           ) : (
118             <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
119               {classes.map((c) => (
120                 <ClassCard key={c.id} cls={c as any} />
121               ))}
122             </div>
123           )}
124         </div>
125       </section>
126     </main>
127   );
128 }

===== app/dashboard/ClassCard.tsx =====
1 "use client";
2 import Link from "next/link";
3 import { useEffect, useRef, useState } from "react";
4 import ShareClassModal from "@/components/ShareClassModal";
5 
6 type Role = "PROFESSOR" | "GESTOR" | null;
7 type ClassLite = { id: string; name: string; roleForMe?: Role };
8 
9 export default function ClassCard({ cls }: { cls: ClassLite }) {
10   const item = cls;
11   const [menuOpen, setMenuOpen] = useState(false);
12   const [shareOpen, setShareOpen] = useState(false);
13   const menuRef = useRef<HTMLDivElement | null>(null);
14 
15   useEffect(() => {
16     function onDocClick(e: MouseEvent) {
17       if (!menuRef.current) return;
18       if (!menuRef.current.contains(e.target as Node)) setMenuOpen(false);
19     }
20     if (menuOpen) document.addEventListener("mousedown", onDocClick);
21     return () => document.removeEventListener("mousedown", onDocClick);
22   }, [menuOpen]);
23 
24   const badge =
25     item.roleForMe ? (
26       <span
27         className={`inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-xs font-medium ${
28           item.roleForMe === "PROFESSOR"
29             ? "bg-blue-50 text-blue-700 border border-blue-200"
30             : "bg-emerald-50 text-emerald-700 border border-emerald-200"
31         }`}
32       >
33         {item.roleForMe === "PROFESSOR" ? "Professor" : "Gestor"}
34       </span>
35     ) : null;
36 
37   return (
38     <div className="relative">
39       <Link href={`/classes/${item.id}`} className="block border rounded-xl p-4 pr-12 hover:shadow-sm transition">
40         <div className="flex items-center justify-between gap-3">
41           <h3 className="font-semibold truncate">{item.name}</h3>
42           {badge}
43         </div>
44       </Link>
45 
46       <div className="absolute top-2 right-2" ref={menuRef}>
47         <button
48           type="button"
49           className="h-8 w-8 inline-flex items-center justify-center rounded-md hover:bg-gray-100 border border-gray-200"
50           aria-label="Mais ações"
51           onClick={(e) => { e.preventDefault(); e.stopPropagation(); setMenuOpen((v) => !v); }}
52         >
53           <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
54             <circle cx="12" cy="5" r="1.8" />
55             <circle cx="12" cy="12" r="1.8" />
56             <circle cx="12" cy="19" r="1.8" />
57           </svg>
58         </button>
59 
60         {menuOpen && (
61           <div className="absolute right-0 mt-2 w-44 rounded-md border bg-white shadow-md z-10" onClick={(e) => { e.stopPropagation(); }}>
62             <button className="w-full px-3 py-2 text-left text-sm hover:bg-gray-50" onClick={() => { setMenuOpen(false); setShareOpen(true); }}>
63               Compartilhar
64             </button>
65           </div>
66         )}
67       </div>
68 
69       <ShareClassModal classId={item.id} open={shareOpen} onOpenChange={setShareOpen} />
70     </div>
71   );
72 }

===== app/(app)/dashboard/ClassCard.tsx =====
1 "use client";
2 import Link from "next/link";
3 import { useEffect, useRef, useState } from "react";
4 import ShareClassModal from "@/components/ShareClassModal";
5 
6 type Role = "PROFESSOR" | "GESTOR" | null;
7 type ClassLite = { id: string; name: string; roleForMe?: Role };
8 
9 export default function ClassCard({ cls }: { cls: ClassLite }) {
10   const item = cls;
11   const [menuOpen, setMenuOpen] = useState(false);
12   const [shareOpen, setShareOpen] = useState(false);
13   const menuRef = useRef<HTMLDivElement | null>(null);
14 
15   useEffect(() => {
16     function onDocClick(e: MouseEvent) {
17       if (!menuRef.current) return;
18       if (!menuRef.current.contains(e.target as Node)) setMenuOpen(false);
19     }
20     if (menuOpen) document.addEventListener("mousedown", onDocClick);
21     return () => document.removeEventListener("mousedown", onDocClick);
22   }, [menuOpen]);
23 
24   const badge =
25     item.roleForMe ? (
26       <span
27         className={`inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-xs font-medium ${
28           item.roleForMe === "PROFESSOR"
29             ? "bg-blue-50 text-blue-700 border border-blue-200"
30             : "bg-emerald-50 text-emerald-700 border border-emerald-200"
31         }`}
32       >
33         {item.roleForMe === "PROFESSOR" ? "Professor" : "Gestor"}
34       </span>
35     ) : null;
36 
37   return (
38     <div className="relative">
39       <Link href={`/classes/${item.id}`} className="block border rounded-xl p-4 pr-12 hover:shadow-sm transition">
40         <div className="flex items-center justify-between gap-3">
41           <h3 className="font-semibold truncate">{item.name}</h3>
42           {badge}
43         </div>
44       </Link>
45 
46       <div className="absolute top-2 right-2" ref={menuRef}>
47         <button
48           type="button"
49           className="h-8 w-8 inline-flex items-center justify-center rounded-md hover:bg-gray-100 border border-gray-200"
50           aria-label="Mais ações"
51           onClick={(e) => { e.preventDefault(); e.stopPropagation(); setMenuOpen((v) => !v); }}
52         >
53           <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
54             <circle cx="12" cy="5" r="1.8" />
55             <circle cx="12" cy="12" r="1.8" />
56             <circle cx="12" cy="19" r="1.8" />
57           </svg>
58         </button>
59 
60         {menuOpen && (
61           <div className="absolute right-0 mt-2 w-44 rounded-md border bg-white shadow-md z-10" onClick={(e) => { e.stopPropagation(); }}>
62             <button className="w-full px-3 py-2 text-left text-sm hover:bg-gray-50" onClick={() => { setMenuOpen(false); setShareOpen(true); }}>
63               Compartilhar
64             </button>
65           </div>
66         )}
67       </div>
68 
69       <ShareClassModal classId={item.id} open={shareOpen} onOpenChange={setShareOpen} />
70     </div>
71   );
72 }

===== components/ShareClassModal.tsx =====
1 "use client";
2 import { useState, useEffect } from "react";
3 
4 type LinkRow = { id: string; token: string; role: "PROFESSOR" | "GESTOR"; createdAt: string; createdBy: string; };
5 type Props = { classId: string; open?: boolean; onOpenChange?: (v: boolean) => void; };
6 
7 export default function ShareClassModal({ classId, open: openProp, onOpenChange }: Props) {
8   const [internalOpen, setInternalOpen] = useState(false);
9   const open = openProp ?? internalOpen;
10   const setOpen = onOpenChange ?? setInternalOpen;
11 
12   const [loading, setLoading] = useState(false);
13   const [links, setLinks] = useState<LinkRow[]>([]);
14   const [msg, setMsg] = useState<string | null>(null);
15   const [err, setErr] = useState<string | null>(null);
16   const [email, setEmail] = useState("");
17   const [inviteRole, setInviteRole] = useState<"PROFESSOR" | "GESTOR">("GESTOR");
18 
19   async function loadLinks() {
20     setLoading(true); setErr(null);
21     try {
22       const res = await fetch(`/api/classes/${classId}/access/links`, { cache: "no-store" });
23       const data = await res.json();
24       if (!res.ok || !data?.ok) throw new Error(data?.error ?? "Falha ao listar links");
25       setLinks(data.links || []);
26     } catch (e: any) { setErr(e.message || "Erro ao carregar links"); }
27     finally { setLoading(false); }
28   }
29 
30   useEffect(() => { if (open) loadLinks(); }, [open]);
31 
32   async function createLink(role: "PROFESSOR" | "GESTOR") {
33     setLoading(true); setMsg(null); setErr(null);
34     try {
35       const res = await fetch(`/api/classes/${classId}/access/links`, {
36         method: "POST", headers: { "content-type": "application/json" }, body: JSON.stringify({ role })
37       });
38       const data = await res.json();
39       if (!res.ok || !data?.ok) throw new Error(data?.error ?? "Falha ao criar link");
40       setMsg(role === "PROFESSOR" ? "Link de professor criado!" : "Link de gestor criado!");
41       await loadLinks();
42     } catch (e: any) { setErr(e.message || "Erro ao criar link"); }
43     finally { setLoading(false); }
44   }
45 
46   async function copyLink(token: string) {
47     const url = `${window.location.origin}/share/${token}`;
48     try { await navigator.clipboard.writeText(url); setMsg("Link copiado!"); }
49     catch { setErr("Não consegui copiar — copie manualmente:"); }
50   }
51 
52   async function inviteByEmail() {
53     setLoading(true); setMsg(null); setErr(null);
54     try {
55       const res = await fetch(`/api/classes/${classId}/access/members`, {
56         method: "POST", headers: { "content-type": "application/json" }, body: JSON.stringify({ email, role: inviteRole })
57       });
58       const data = await res.json();
59       if (!res.ok || !data?.ok) throw new Error(data?.error ?? "Falha ao convidar");
60       setMsg(`Acesso concedido a ${email} como ${inviteRole}.`); setEmail("");
61     } catch (e: any) { setErr(e.message || "Erro ao convidar"); }
62     finally { setLoading(false); }
63   }
64 
65   return (
66     <>
67       {openProp === undefined && (
68         <button
69           type="button"
70           className="p-2 rounded-lg border border-gray-300 hover:bg-gray-50"
71           onClick={() => setOpen(true)}
72           aria-label="Compartilhar turma" title="Compartilhar"
73         >
74           <svg width="20" height="20" viewBox="0 0 24 24" fill="none" aria-hidden="true">
75             <path d="M16 6a3 3 0 1 0-2.83-4H13a3 3 0 0 0 3 4Z" fill="currentColor" opacity=".15"/>
76             <path d="M18 8a3 3 0 1 0-2.83-4M6 14a3 3 0 1 0 2.83 4M6 14l9-5M8.83 18l7.34 4" stroke="currentColor" strokeWidth="1.6" strokeLinecap="round" strokeLinejoin="round"/>
77           </svg>
78         </button>
79       )}
80 
81       {open && (
82         <div className="fixed inset-0 z-50">
83           <div className="absolute inset-0 bg-black/30" onClick={() => setOpen(false)} aria-hidden="true" />
84           <div className="absolute inset-0 flex items-center justify-center p-4">
85             <div className="w-full max-w-lg rounded-xl bg-white p-5 shadow-xl">
86               <div className="flex items-center justify-between mb-3">
87                 <h2 className="text-lg font-semibold">Compartilhar turma</h2>
88                 <button className="p-1 rounded-md hover:bg-gray-100" onClick={() => setOpen(false)} aria-label="Fechar">✕</button>
89               </div>
90 
91               <p className="text-sm text-gray-600 mb-3">Convide como <strong>Professor</strong> (único) ou <strong>Gestor</strong> (vários).</p>
92 
93               <div className="space-y-4">
94                 <div>
95                   <div className="text-sm font-medium mb-2">Convidar por e-mail (usuário já cadastrado)</div>
96                   <div className="flex gap-2">
97                     <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="usuario@exemplo.com" className="w-full rounded-md border px-3 py-1.5 text-sm" />
98                     <select value={inviteRole} onChange={(e) => setInviteRole(e.target.value as any)} className="rounded-md border px-2 py-1.5 text-sm">
99                       <option value="GESTOR">Gestor</option>
100                       <option value="PROFESSOR">Professor</option>
101                     </select>
102                     <button disabled={loading || !email} onClick={inviteByEmail} className="px-3 py-1.5 rounded-lg bg-blue-600 text-white disabled:opacity-60">Convidar</button>
103                   </div>
104                 </div>
105 
106                 <div className="border rounded-md">
107                   <div className="p-3 border-b text-sm font-medium">Links ativos</div>
108                   <div className="max-h-64 overflow-auto divide-y">
109                     {loading ? (
110                       <div className="p-3 text-sm text-gray-500">Carregando…</div>
111                     ) : links.length === 0 ? (
112                       <div className="p-3 text-sm text-gray-500">Nenhum link criado ainda.</div>
113                     ) : (
114                       links.map((l) => {
115                         const url = typeof window !== "undefined" ? `${window.location.origin}/share/${l.token}` : `/share/${l.token}`;
116                         return (
117                           <div key={l.id} className="p-3 flex items-center justify-between gap-3">
118                             <div className="min-w-0">
119                               <div className="text-sm font-medium">{l.role}</div>
120                               <div className="text-xs text-gray-500 truncate">{url}</div>
121                             </div>
122                             <div className="flex items-center gap-2 shrink-0">
123                               <button className="px-2 py-1 rounded-md border border-gray-300 hover:bg-gray-50 text-sm" onClick={() => copyLink(l.token)}>Copiar</button>
124                             </div>
125                           </div>
126                         );
127                       })
128                     )}
129                   </div>
130                 </div>
131 
132                 {msg && <div className="text-sm text-green-700 bg-green-50 border border-green-200 rounded-md p-2">{msg}</div>}
133                 {err && <div className="text-sm text-red-700 bg-red-50 border border-red-200 rounded-md p-2">{err}</div>}
134               </div>
135 
136               <div className="mt-4 text-right">
137                 <button className="px-3 py-1.5 rounded-lg border border-gray-300 hover:bg-gray-50" onClick={() => setOpen(false)}>Fechar</button>
138               </div>
139             </div>
140           </div>
141         </div>
142       )}
143     </>
144   );
145 }

===== app/api/classes/[id]/route.ts =====
1 import { NextResponse } from "next/server";
2 import { prisma } from "@/lib/prisma";
3 import { requireUser, getRole } from "@/lib/session";
4 
5 export async function DELETE(_req: Request, ctx: { params: Promise<{ id: string }> }) {
6   const { id } = await ctx.params;
7   const me = await requireUser();
8   if (!me) return NextResponse.json({ ok:false }, { status: 401 });
9 
10   const role = await getRole(me.id, id);
11   if (!role) return NextResponse.json({ ok:false, error:"Sem acesso" }, { status: 403 });
12   // por enquanto: permitir PROFESSOR e GESTOR
13   // if (role !== "PROFESSOR") return NextResponse.json({ ok:false, error:"Apenas professor pode excluir a turma" }, { status: 403 });
14 
15   await prisma.class.delete({ where: { id } });
16   return NextResponse.json({ ok:true, deletedId: id });
17 }
