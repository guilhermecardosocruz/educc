
===== prisma/schema.prisma =====
1 generator client {
2   provider = "prisma-client-js"
3 }
4 
5 datasource db {
6   provider   = "postgresql"
7   url        = env("DATABASE_URL")
8   directUrl  = env("DIRECT_URL")
9 }
10 
11 model User {
12   id           String   @id @default(cuid())
13   name         String
14   cpf          String   @unique
15   birthDate    DateTime
16   email        String   @unique
17   phone        String
18   createdAt    DateTime @default(now())
19   passwordHash String?
20 
21   resetTokens PasswordResetToken[]
22   classes     Class[]            @relation("UserClasses")
23 }
24 
25 model PasswordResetToken {
26   id        String   @id @default(cuid())
27   token     String   @unique
28   userId    String
29   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
30   expiresAt DateTime
31   usedAt    DateTime?
32   createdAt DateTime @default(now())
33 }
34 
35 model Class {
36   id          String       @id @default(cuid())
37   name        String
38   ownerId     String
39   owner       User         @relation("UserClasses", fields: [ownerId], references: [id], onDelete: Cascade)
40   createdAt   DateTime     @default(now())
41 
42   attendances Attendance[]
43   contents    Content[]
44   students    Student[]
45 }
46 
47 model Attendance {
48   id        String   @id @default(cuid())
49   classId   String
50   cls       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
51   seq       Int
52   title     String   @default("Chamada")
53   createdAt DateTime @default(now())
54   lessonDate DateTime?   // data editável da aula (UTC, opcional)
55 
56   @@unique([classId, seq])
57 }
58 
59 model Content {
60   id        String   @id @default(cuid())
61   classId   String
62   cls       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
63   seq       Int
64   title     String   @default("Conteúdo")
65   bodyHtml  String?  // futuro: editor; por enquanto pode ficar vazio
66   createdAt DateTime @default(now())
67 
68   @@unique([classId, seq])
69 }
70 
71 model Student {
72   id        String   @id @default(cuid())
73   classId   String
74   cls       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
75   name      String
76   cpf       String?
77   contact   String?  // whatsapp/email/telefone
78   createdAt DateTime @default(now())
79 }
80 
81 
82 /// Marcações de presença por aluno em uma chamada específica (classId+seq).
83 
84 /// Marcações de presença por aluno em uma chamada específica (classId+seq).
85 model AttendancePresence {
86   id        String   @id @default(cuid())
87   classId   String
88   seq       Int
89   studentId String
90   present   Boolean  @default(false)
91   createdAt DateTime @default(now())
92   updatedAt DateTime @updatedAt
93 
94   // Sem relações Prisma para não exigir back-relations agora.
95   @@unique([classId, seq, studentId], name: "class_seq_student_unique")
96   @@index([classId, seq], name: "class_seq_idx")
97 }

===== app/api/classes/[id]/conteudos/route.ts =====
1 import { NextResponse } from "next/server";
2 import { prisma } from "@/lib/prisma";
3 import { requireUser } from "@/lib/session";
4 import { z } from "zod";
5 
6 // Monta um HTML simples com as seções opcionais, para persistência única
7 function toBodyHtml(obj: {objetivos?: string; desenvolvimento?: string; recursos?: string; bncc?: string}) {
8   const b = [];
9   if (obj.objetivos) b.push(`<h3>Objetivos</h3><p>${obj.objetivos}</p>`);
10   if (obj.desenvolvimento) b.push(`<h3>Desenvolvimento das Atividades</h3><p>${obj.desenvolvimento}</p>`);
11   if (obj.recursos) b.push(`<h3>Recursos Pedagógicos</h3><p>${obj.recursos}</p>`);
12   if (obj.bncc) b.push(`<h3>BNCC</h3><p>${obj.bncc}</p>`);
13   return b.join("\n");
14 }
15 
16 const createSchema = z.object({
17   title: z.string().trim().min(2, "Nome da aula é obrigatório"),
18   objetivos: z.string().optional(),
19   desenvolvimento: z.string().optional(),
20   recursos: z.string().optional(),
21   bncc: z.string().optional(),
22 });
23 
24 export async function GET(_req: Request, { params }: { params: Promise<{ id: string }> }) {
25   const { id } = await params;
26   const user = await requireUser();
27   if (!user) return NextResponse.json({ ok:false }, { status: 401 });
28 
29   // checa turma do usuário
30   const cls = await prisma.class.findFirst({ where: { id, ownerId: user.id }, select: { id: true } });
31   if (!cls) return NextResponse.json({ ok:false, error: "Turma não encontrada" }, { status: 404 });
32 
33   const list = await prisma.content.findMany({
34     where: { classId: id },
35     orderBy: { seq: "asc" },
36     select: { id: true, seq: true, title: true }
37   });
38 
39   return NextResponse.json({ ok:true, list });
40 }
41 
42 export async function POST(req: Request, { params }: { params: Promise<{ id: string }> }) {
43   const { id } = await params;
44   const user = await requireUser();
45   if (!user) return NextResponse.json({ ok:false }, { status: 401 });
46 
47   const cls = await prisma.class.findFirst({ where: { id, ownerId: user.id }, select: { id: true } });
48   if (!cls) return NextResponse.json({ ok:false, error: "Turma não encontrada" }, { status: 404 });
49 
50   const body = await req.json().catch(()=> ({}));
51   const parsed = createSchema.safeParse(body);
52   if (!parsed.success) return NextResponse.json({ ok:false, error: parsed.error.flatten() }, { status: 400 });
53 
54   // seq = último + 1
55   const last = await prisma.content.findFirst({ where: { classId: id }, orderBy: { seq: "desc" }, select: { seq: true } });
56   const nextSeq = (last?.seq ?? 0) + 1;
57 
58   const created = await prisma.content.create({
59     data: {
60       classId: id,
61       seq: nextSeq,
62       title: parsed.data.title,
63       bodyHtml: toBodyHtml({
64         objetivos: parsed.data.objetivos,
65         desenvolvimento: parsed.data.desenvolvimento,
66         recursos: parsed.data.recursos,
67         bncc: parsed.data.bncc,
68       }),
69     },
70     select: { id: true, seq: true, title: true }
71   });
72 
73   return NextResponse.json({ ok:true, content: created }, { status: 201 });
74 }

===== app/api/classes/[id]/conteudos/[seq]/route.ts =====
1 import { NextResponse } from "next/server";
2 import { prisma } from "@/lib/prisma";
3 import { requireUser } from "@/lib/session";
4 import { z } from "zod";
5 
6 /** Serialização do bodyHtml em seções e vice-versa */
7 function toBodyHtml(obj: {objetivos?: string; desenvolvimento?: string; recursos?: string; bncc?: string}) {
8   const b = [];
9   if (obj.objetivos) b.push(`<h3>Objetivos</h3><p>${obj.objetivos}</p>`);
10   if (obj.desenvolvimento) b.push(`<h3>Desenvolvimento das Atividades</h3><p>${obj.desenvolvimento}</p>`);
11   if (obj.recursos) b.push(`<h3>Recursos Pedagógicos</h3><p>${obj.recursos}</p>`);
12   if (obj.bncc) b.push(`<h3>BNCC</h3><p>${obj.bncc}</p>`);
13   return b.join("\n");
14 }
15 function fromBodyHtml(html?: string) {
16   const out: Record<string,string> = {};
17   if (!html) return out;
18   const get = (title: string) => {
19     const re = new RegExp(`<h3>\\s*${title}\\s*<\\/h3>\\s*<p>([\\s\\S]*?)<\\/p>`, "i");
20     const m = html.match(re);
21     return m ? m[1] : "";
22   };
23   out.objetivos = get("Objetivos");
24   out.desenvolvimento = get("Desenvolvimento das Atividades");
25   out.recursos = get("Recursos Pedagógicos");
26   out.bncc = get("BNCC");
27   return out;
28 }
29 
30 const patchSchema = z.object({
31   title: z.string().trim().min(1).optional(), // "nome da aula" pode editar mas não é obrigatório no PATCH
32   objetivos: z.string().optional(),
33   desenvolvimento: z.string().optional(),
34   recursos: z.string().optional(),
35   bncc: z.string().optional(),
36 });
37 
38 export async function GET(_req: Request, { params }: { params: Promise<{ id: string; seq: string }> }) {
39   const { id, seq } = await params;
40   const user = await requireUser();
41   if (!user) return NextResponse.json({ ok:false }, { status: 401 });
42 
43   const cls = await prisma.class.findFirst({ where: { id, ownerId: user.id }, select: { id:true } });
44   if (!cls) return NextResponse.json({ ok:false, error:"Turma não encontrada" }, { status:404 });
45 
46   const content = await prisma.content.findFirst({
47     where: { classId: id, seq: Number(seq) },
48     select: { id:true, seq:true, title:true, bodyHtml:true }
49   });
50   if (!content) return NextResponse.json({ ok:false, error:"Conteúdo não encontrado" }, { status:404 });
51 
52   const sections = fromBodyHtml(content.bodyHtml || "");
53   return NextResponse.json({ ok:true, content: { ...content, ...sections } });
54 }
55 
56 export async function PATCH(req: Request, { params }: { params: Promise<{ id: string; seq: string }> }) {
57   const { id, seq } = await params;
58   const user = await requireUser();
59   if (!user) return NextResponse.json({ ok:false }, { status: 401 });
60 
61   const cls = await prisma.class.findFirst({ where: { id, ownerId: user.id }, select: { id:true } });
62   if (!cls) return NextResponse.json({ ok:false, error:"Turma não encontrada" }, { status:404 });
63 
64   const body = await req.json().catch(()=> ({}));
65   const parsed = patchSchema.safeParse(body);
66   if (!parsed.success) return NextResponse.json({ ok:false, error: parsed.error.flatten() }, { status:400 });
67 
68   const current = await prisma.content.findFirst({
69     where: { classId: id, seq: Number(seq) },
70     select: { id:true, title:true, bodyHtml:true, seq:true }
71   });
72   if (!current) return NextResponse.json({ ok:false, error:"Conteúdo não encontrado" }, { status:404 });
73 
74   const existing = fromBodyHtml(current.bodyHtml || "");
75   const merged = {
76     objetivos: parsed.data.objetivos ?? existing.objetivos ?? "",
77     desenvolvimento: parsed.data.desenvolvimento ?? existing.desenvolvimento ?? "",
78     recursos: parsed.data.recursos ?? existing.recursos ?? "",
79     bncc: parsed.data.bncc ?? existing.bncc ?? "",
80   };
81 
82   const updated = await prisma.content.update({
83     where: { id: current.id },
84     data: {
85       title: parsed.data.title ?? current.title,
86       bodyHtml: toBodyHtml(merged),
87     },
88     select: { id:true, seq:true, title:true, bodyHtml:true }
89   });
90 
91   return NextResponse.json({ ok:true, content: updated });
92 }
93 
94 export async function DELETE(_req: Request, { params }: { params: Promise<{ id: string; seq: string }> }) {
95   const { id, seq } = await params;
96   const user = await requireUser();
97   if (!user) return NextResponse.json({ ok:false }, { status: 401 });
98 
99   const cls = await prisma.class.findFirst({ where: { id, ownerId: user.id }, select: { id:true } });
100   if (!cls) return NextResponse.json({ ok:false, error:"Turma não encontrada" }, { status:404 });
101 
102   const content = await prisma.content.findFirst({ where: { classId: id, seq: Number(seq) }, select: { id:true } });
103   if (!content) return NextResponse.json({ ok:false, error:"Conteúdo não encontrado" }, { status:404 });
104 
105   await prisma.content.delete({ where: { id: content.id } });
106 
107   return NextResponse.json({ ok:true });
108 }

===== app/api/classes/[id]/route.ts =====
1 import { NextResponse } from "next/server";
2 import { prisma } from "@/lib/prisma";
3 import { requireUser } from "@/lib/session";
4 
5 export async function GET(_req: Request, ctx: { params: Promise<{ id: string }> }) {
6   const { id } = await ctx.params;
7   const user = await requireUser();
8   if (!user) return NextResponse.json({ ok:false }, { status: 401 });
9 
10   const cls = await prisma.class.findFirst({
11     where: { id, ownerId: user.id },
12     select: { id: true, name: true }
13   });
14   if (!cls) return NextResponse.json({ ok:false }, { status: 404 });
15 
16   return NextResponse.json({ ok:true, class: cls });
17 }

===== app/classes/[id]/conteudos/page.tsx =====
1 "use client";
2 import Link from "next/link";
3 import { useEffect, useRef, useState } from "react";
4 import { useParams } from "next/navigation";
5 
6 type Item = { id: string; seq: number; title: string };
7 
8 export default function ConteudosPage() {
9   const { id } = useParams<{ id: string }>();
10   const [list, setList] = useState<Item[]>([]);
11   const [loading, setLoading] = useState(true);
12   const [err, setErr] = useState<string|null>(null);
13 
14   const [open, setOpen] = useState(false);
15   const [title, setTitle] = useState("");
16   const [objetivos, setObjetivos] = useState("");
17   const [desenvolvimento, setDesenvolvimento] = useState("");
18   const [recursos, setRecursos] = useState("");
19   const [bncc, setBncc] = useState("");
20   const [saving, setSaving] = useState(false);
21 
22   const fileRef = useRef<HTMLInputElement|null>(null);
23   const [fname, setFname] = useState<string|null>(null);
24   const [importing, setImporting] = useState(false);
25 
26   async function load() {
27     if (!id) return;
28     setLoading(true); setErr(null);
29     try {
30       const res = await fetch(`/api/classes/${id}/conteudos`, { cache: "no-store" });
31       const data = await res.json().catch(()=> ({}));
32       if (!res.ok || !data?.ok) throw new Error(data?.error || "Falha ao carregar");
33       setList(data.list || []);
34     } catch (e:any) {
35       setErr(e?.message || "Erro ao carregar");
36     } finally {
37       setLoading(false);
38     }
39   }
40 
41   useEffect(()=> { load(); }, [id]);
42 
43   async function onSave(e: React.FormEvent) {
44     e.preventDefault();
45     if (!title.trim()) { alert("Nome da aula é obrigatório."); return; }
46     setSaving(true);
47     try {
48       const res = await fetch(`/api/classes/${id}/conteudos`, {
49         method: "POST",
50         headers: { "content-type": "application/json" },
51         body: JSON.stringify({ title: title.trim(), objetivos, desenvolvimento, recursos, bncc })
52       });
53       const data = await res.json().catch(()=> ({}));
54       if (!res.ok || !data?.ok) throw new Error(data?.error || "Falha ao salvar");
55       setOpen(false);
56       setTitle(""); setObjetivos(""); setDesenvolvimento(""); setRecursos(""); setBncc("");
57       await load();
58     } catch (e:any) {
59       alert(e?.message || "Erro ao salvar");
60     } finally {
61       setSaving(false);
62     }
63   }
64 
65   async function onImport() {
66     const file = fileRef.current?.files?.[0];
67     if (!file) return;
68     setImporting(true);
69     try {
70       const fd = new FormData();
71       fd.append("file", file);
72       const res = await fetch(`/api/classes/${id}/conteudos/import`, { method: "POST", body: fd });
73       const data = await res.json().catch(()=> ({}));
74       if (!res.ok || !data?.ok) throw new Error(data?.error || "Falha ao importar");
75       await load();
76       if (fileRef.current) fileRef.current.value = "";
77       setFname(null);
78       alert(`Importação concluída: criados ${data.created ?? 0}, atualizados ${data.updated ?? 0}.`);
79     } catch(e:any) {
80       alert(e?.message || "Erro ao importar");
81     } finally {
82       setImporting(false);
83     }
84   }
85 
86   return (
87     <main className="mx-auto max-w-5xl px-4 py-6 sm:px-6 sm:py-10">
88       <div className="mb-6 rounded-2xl border bg-white p-5 sm:p-6">
89         <div className="mb-4 flex items-center justify-between">
90           <Link href={`/classes/${id}`} className="rounded-xl bg-[#0A66FF] px-4 py-2 text-white shadow hover:opacity-90">Voltar</Link>
91         </div>
92         <h1 className="text-2xl font-semibold">Conteúdos — <span className="text-[#0A66FF]">Turma</span></h1>
93         <p className="mt-1 text-sm text-gray-600">Gerencie os conteúdos desta turma.</p>
94 
95         <div className="mt-4">
96           <button onClick={()=> setOpen(true)} className="rounded-xl bg-[#0A66FF] px-4 py-2 text-white shadow hover:opacity-90">
97             + Adicionar conteúdo
98           </button>
99         </div>
100       </div>
101 
102       <div className="rounded-2xl border bg-white">
103         {loading ? (
104           <p className="p-4 text-sm text-gray-600">Carregando…</p>
105         ) : err ? (
106           <p className="p-4 text-sm text-red-600">{err}</p>
107         ) : list.length === 0 ? (
108           <div className="p-4 text-sm text-gray-700">
109             Nenhum conteúdo ainda. Clique em <b>Adicionar conteúdo</b> ou importe por planilha abaixo.
110           </div>
111         ) : (
112           <ul className="divide-y">
113             {list.map((it)=> (
114               <li key={it.id} className="flex items-center justify-between p-4">
115                 <div className="text-sm">
116                   <div className="font-medium">{it.seq} — {it.title}</div>
117                 </div>
118                 {/* ✅ agora aponta para /conteudos/[seq] */}
119                 <Link
120                   href={`/classes/${id}/conteudos/${it.seq}`}
121                   className="rounded-full border px-3 py-1 text-sm hover:border-blue-400 hover:text-blue-700"
122                 >
123                   Abrir
124                 </Link>
125               </li>
126             ))}
127           </ul>
128         )}
129       </div>
130 
131       <section className="mt-6 rounded-2xl border bg-white p-5 sm:p-6">
132         <h2 className="text-base font-semibold">Enviar conteúdo por planilha</h2>
133         <p className="mt-1 text-sm text-gray-600">
134           Suporte a CSV (pronto) e XLSX (preparado). Campos: <b>nome da aula (obrigatório)</b>,
135           objetivos, desenvolvimento das atividades, recursos pedagógicos e BNCC.
136         </p>
137         <div className="mt-3 flex flex-wrap items-center gap-2">
138           <input
139             ref={fileRef}
140             type="file"
141             accept=".csv,.xlsx"
142             id="conteudos-file"
143             className="hidden"
144             onChange={(e)=> setFname(e.target.files?.[0]?.name ?? null)}
145           />
146           <label htmlFor="conteudos-file" className="cursor-pointer rounded-xl border px-3 py-2 text-sm hover:border-blue-500 hover:text-blue-600">
147             Escolher arquivo (CSV/XLSX)
148           </label>
149           <button
150             onClick={onImport}
151             disabled={importing || !fname}
152             className="rounded-xl bg-[#0A66FF] px-4 py-2 text-sm font-medium text-white hover:opacity-90 disabled:opacity-60"
153           >
154             {importing ? "Enviando..." : "Enviar planilha"}
155           </button>
156           {fname && <span className="text-xs text-gray-700">Selecionado: {fname}</span>}
157           <a className="rounded-xl border px-3 py-1.5 text-sm hover:border-blue-500 hover:text-blue-600" href="/templates/contents.csv" target="_blank" rel="noreferrer">
158             Baixar modelo CSV
159           </a>
160           <a className="rounded-xl border px-3 py-1.5 text-sm hover:border-blue-500 hover:text-blue-600" href="/templates/contents.xlsx" target="_blank" rel="noreferrer">
161             Baixar modelo XLSX
162           </a>
163         </div>
164       </section>
165 
166       {/* Modal - igual à versão anterior */}
167       {open && (
168         <div className="fixed inset-0 z-50 grid place-items-center bg-black/40 p-4">
169           <div className="w-full max-w-xl rounded-2xl bg-white p-5 sm:p-6 shadow-lg">
170             <h3 className="text-lg font-semibold">Novo conteúdo</h3>
171             <p className="text-xs text-gray-500 mb-3">Somente <b>Nome da aula</b> é obrigatório.</p>
172             <form onSubmit={onSave} className="space-y-3">
173               <div>
174                 <label className="mb-1 block text-sm">Nome da aula *</label>
175                 <input className="input" value={title} onChange={(e)=>setTitle(e.target.value)} placeholder="Ex.: Algoritmos — Aula 1" required />
176               </div>
177               <div>
178                 <label className="mb-1 block text-sm">Objetivos</label>
179                 <textarea className="input min-h-[72px]" value={objetivos} onChange={(e)=>setObjetivos(e.target.value)} />
180               </div>
181               <div>
182                 <label className="mb-1 block text-sm">Desenvolvimento das atividades</label>
183                 <textarea className="input min-h-[72px]" value={desenvolvimento} onChange={(e)=>setDesenvolvimento(e.target.value)} />
184               </div>
185               <div>
186                 <label className="mb-1 block text-sm">Recursos pedagógicos</label>
187                 <textarea className="input min-h-[72px]" value={recursos} onChange={(e)=>setRecursos(e.target.value)} />
188               </div>
189               <div>
190                 <label className="mb-1 block text-sm">BNCC</label>
191                 <input className="input" value={bncc} onChange={(e)=>setBncc(e.target.value)} placeholder="Ex.: EF06MA01" />
192               </div>
193               <div className="flex justify-end gap-2 pt-2">
194                 <button type="button" onClick={()=> setOpen(false)} className="rounded-xl border px-3 py-2 text-sm">Cancelar</button>
195                 <button type="submit" disabled={saving} className="rounded-xl bg-[#0A66FF] px-4 py-2 text-white disabled:opacity-60">
196                   {saving ? "Salvando..." : "Salvar"}
197                 </button>
198               </div>
199             </form>
200           </div>
201         </div>
202       )}
203     </main>
204   );
205 }

===== app/classes/[id]/conteudos/ui.tsx =====
1 "use client";
2 
3 import { useRef, useState } from "react";
4 
5 export function ImportContentsBox({ classId }: { classId: string }) {
6   const [uploadFile, setUploadFile] = useState<File | null>(null);
7   const [uploadName, setUploadName] = useState<string | null>(null);
8   const [importing, setImporting] = useState(false);
9   const fileRef = useRef<HTMLInputElement>(null);
10 
11   async function handleImportSend() {
12     if (!uploadFile) return;
13     setImporting(true);
14     try {
15       const fd = new FormData();
16       fd.append("file", uploadFile);
17       const res = await fetch(`/api/classes/${classId}/conteudos/import`, {
18         method: "POST",
19         body: fd,
20       });
21 
22       let errorMsg = "Erro ao importar conteúdos";
23       let data: any = null;
24       try { data = await res.json(); } catch {}
25       if (!res.ok || !data?.ok) {
26         if (data?.error) {
27           if (typeof data.error === "string") errorMsg = data.error;
28           else if (data.error?.formErrors?.formErrors?.length) errorMsg = data.error.formErrors.formErrors.join("\n");
29           else if (data.error?.fieldErrors) errorMsg = JSON.stringify(data.error.fieldErrors);
30         }
31         throw new Error(errorMsg);
32       }
33 
34       // sucesso: recarrega a lista
35       setUploadFile(null);
36       setUploadName(null);
37       if (fileRef.current) fileRef.current.value = "";
38       window.location.reload();
39     } catch (e: any) {
40       alert(e?.message || "Erro ao importar conteúdos");
41       console.error(e);
42     } finally {
43       setImporting(false);
44     }
45   }
46 
47   return (
48     <section className="mt-8 rounded-2xl border bg-white">
49       <div className="border-b px-5 py-5">
50         <h3 className="text-sm font-semibold text-gray-900">Importar conteúdos por planilha</h3>
51         <p className="mt-1 text-xs text-gray-600">
52           Formatos aceitos: <b>.csv</b>, <b>.xlsx</b>. Mantenha o cabeçalho: <b>Aula, Título, Conteúdo da Aula, Objetivos, Desenvolvimento das Atividades, Recursos Didáticos, BNCC</b>.
53         </p>
54       </div>
55 
56       <div className="px-5 py-5">
57         <div className="flex flex-col items-center justify-center rounded-xl border border-dashed border-blue-300 bg-blue-50/40 px-6 py-8 text-center">
58           <p className="text-sm font-medium text-gray-800">Selecione seu arquivo CSV/XLSX</p>
59           <p className="text-xs text-gray-500">Formatos aceitos: .csv, .xlsx</p>
60 
61           <div className="mt-3 flex flex-wrap items-center justify-center gap-2">
62             <input
63               ref={fileRef}
64               type="file"
65               accept=".csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
66               className="hidden"
67               id="contents-file-input"
68               onChange={(e) => {
69                 const f = e.target.files?.[0] || null;
70                 setUploadName(f ? f.name : null);
71                 setUploadFile(f);
72               }}
73             />
74             <label
75               htmlFor="contents-file-input"
76               className="cursor-pointer rounded-xl border px-3 py-2 text-sm font-medium hover:border-blue-500 hover:text-blue-600"
77             >
78               Escolher arquivo
79             </label>
80 
81             <button
82               type="button"
83               onClick={handleImportSend}
84               disabled={!uploadFile || importing}
85               className="rounded-xl bg-[#0A66FF] px-4 py-2 text-sm font-medium text-white hover:opacity-90 disabled:opacity-60"
86             >
87               {importing ? "Enviando..." : "Enviar planilha"}
88             </button>
89           </div>
90 
91           {uploadName && (
92             <div className="mt-2 text-xs text-gray-700">Selecionado: {uploadName}</div>
93           )}
94 
95           <div className="mt-4 flex flex-wrap items-center justify-center gap-2 text-sm">
96             <a className="rounded-xl border px-3 py-1.5 hover:border-blue-500 hover:text-blue-600" href="/templates/contents.csv" target="_blank" rel="noreferrer">
97               Baixar modelo CSV
98             </a>
99             <a className="rounded-xl border px-3 py-1.5 hover:border-blue-500 hover:text-blue-600" href="/templates/contents.xlsx" target="_blank" rel="noreferrer">
100               Baixar modelo XLSX
101             </a>
102           </div>
103         </div>
104       </div>
105     </section>
106   );
107 }

===== app/classes/[id]/conteudos/List.tsx =====
1 "use client";
2 import Link from "next/link";
3 import { useEffect, useState } from "react";
4 
5 type Content = {
6   seq: number;
7   title: string;
8   description: string | null;
9   imageUrl: string | null;
10 };
11 
12 export default function ConteudosList({ classId }: { classId: string }) {
13   const [items, setItems] = useState<Content[]>([]);
14   const [loading, setLoading] = useState(true);
15 
16   async function load() {
17     setLoading(true);
18     try {
19       const res = await fetch(`/api/classes/${classId}/conteudos`);
20       const data = await res.json().catch(() => ({}));
21       if (!res.ok || !Array.isArray(data)) throw new Error("Falha ao carregar conteúdos");
22       setItems(data);
23     } catch (e: any) {
24       console.error(e);
25       alert(e?.message || "Erro ao carregar conteúdos");
26     } finally {
27       setLoading(false);
28     }
29   }
30 
31   useEffect(() => {
32     load();
33   }, [classId]);
34 
35   if (loading) {
36     return (
37       <section className="mt-6">
38         <div className="rounded-2xl border bg-white p-6 shadow-sm text-sm text-gray-600">Carregando…</div>
39       </section>
40     );
41   }
42 
43   return (
44     <section className="mt-6">
45       {items.length === 0 ? (
46         <div className="rounded-2xl border bg-white p-8 shadow-sm text-center text-gray-700">
47           Nenhum conteúdo ainda. Use “Importar conteúdos por planilha”.
48         </div>
49       ) : (
50         <ul className="divide-y divide-gray-100 rounded-2xl border bg-white">
51           {items.map((c, idx) => (
52             <li key={c.seq} className={idx % 2 ? "bg-blue-50/40" : "bg-white"}>
53               <Link
54                 href={`/classes/${classId}/conteudos/${c.seq}`}
55                 className="group flex items-center justify-between px-4 py-4 hover:bg-blue-50"
56               >
57                 <div className="flex min-w-0 items-center gap-4">
58                   <div className="rounded-xl bg-[#0A66FF]/10 px-3 py-1.5 text-xs font-medium text-[#0A66FF]">
59                     {c.seq}
60                   </div>
61                   <div className="min-w-0">
62                     <p className="truncate text-sm font-medium text-gray-900">
63                       {c.title || `Conteúdo ${c.seq}`}
64                     </p>
65                     {c.description && (
66                       <p className="truncate text-xs text-gray-600">{c.description}</p>
67                     )}
68                   </div>
69                 </div>
70 
71                 <div className="ms-4 shrink-0 rounded-full bg-[#0A66FF]/10 p-2 text-[#0A66FF] transition group-hover:bg-[#0A66FF]/20">
72                   <svg width="18" height="18" viewBox="0 0 24 24" aria-hidden>
73                     <path fill="currentColor" d="M9 6l6 6l-6 6"/>
74                   </svg>
75                 </div>
76               </Link>
77             </li>
78           ))}
79         </ul>
80       )}
81     </section>
82   );
83 }

===== app/classes/[id]/page.tsx =====
1 import Link from "next/link";
2 import { notFound } from "next/navigation";
3 import { prisma } from "@/lib/prisma";
4 import ReportButton from "./ReportButton"; // ✅ único import novo
5 
6 export const dynamic = "force-dynamic";
7 
8 export default async function Page({ params }: { params: Promise<{ id: string }> }) {
9   const { id } = await params;
10 
11   const cls = await prisma.class.findFirst({
12     where: { id },
13     select: { id: true, name: true }
14   });
15   if (!cls) return notFound();
16 
17   return (
18     <main className="min-h-screen">
19       {/* Cabeçalho */}
20       <section className="bg-gradient-to-br from-[#0A66FF]/90 to-[#0A66FF] text-white">
21         <div className="max-w-5xl mx-auto px-6 py-8 flex items-center justify-between gap-3">
22           <Link
23             href={`/dashboard`}
24             className="inline-flex items-center gap-2 rounded-xl bg-white/15 px-4 py-2 text-sm font-medium text-white hover:bg-white/25 focus:outline-none focus:ring-2 focus:ring-white/60"
25           >
26             Voltar
27           </Link>
28 
29           <div className="text-right">
30             <h1 className="text-xl font-semibold">
31               Turma — <span className="opacity-95">{cls.name}</span>
32             </h1>
33             <p className="mt-1 text-sm opacity-90">Gerencie a turma acessando Chamadas e Conteúdos.</p>
34           </div>
35         </div>
36       </section>
37 
38       {/* Corpo */}
39       <section className="max-w-5xl mx-auto px-6 py-8">
40         <div className="rounded-2xl border bg-white p-6 shadow-sm">
41           <h2 className="text-lg font-semibold mb-2 text-gray-900">Ações</h2>
42           <p className="text-gray-600 mb-4">Use os atalhos abaixo para gerenciar a turma.</p>
43           <div className="flex flex-wrap gap-2">
44             <Link
45               href={`/classes/${cls.id}/chamadas`}
46               className="rounded-xl bg-[#0A66FF] px-4 py-2 text-sm font-medium text-white shadow hover:opacity-90"
47             >
48               Ir para Chamadas
49             </Link>
50             <Link
51               href={`/classes/${cls.id}/conteudos`}
52               className="rounded-xl border px-4 py-2 text-sm font-medium text-gray-800 hover:border-blue-400 hover:text-blue-700"
53             >
54               Ver Conteúdos
55             </Link>
56             {/* 🔹 Botão/Modal/PDF (client component interno) */}
57             <ReportButton classId={cls.id} className={cls.name} />
58           </div>
59         </div>
60       </section>
61     </main>
62   );
63 }

===== app/classes/[id]/ReportButton.tsx =====
1 "use client";
2 import { useEffect, useRef, useState } from "react";
3 
4 type RankRow = { name: string; faltas: number };
5 
6 export default function ReportButton({ classId, className }:{ classId:string; className:string }) {
7   const [open, setOpen] = useState(false);
8   const [start, setStart] = useState("");
9   const [end, setEnd] = useState("");
10   const [busy, setBusy] = useState(false);
11   const jsPdfLoaded = useRef(false);
12 
13   useEffect(() => {
14     const d = new Date();
15     const toIso = (dt:Date) => `${dt.getFullYear()}-${String(dt.getMonth()+1).padStart(2,"0")}-${String(dt.getDate()).padStart(2,"0")}`;
16     const end0 = toIso(d);
17     const start0 = toIso(new Date(d.getFullYear(), d.getMonth()-1, d.getDate()));
18     setStart(start0);
19     setEnd(end0);
20   }, []);
21 
22   async function ensureJsPdf(){
23     if (jsPdfLoaded.current) return;
24     await new Promise<void>((resolve, reject) => {
25       const s = document.createElement("script");
26       s.src = "https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js";
27       s.onload = () => { jsPdfLoaded.current = true; resolve(); };
28       s.onerror = () => reject(new Error("Falha ao carregar jsPDF"));
29       document.head.appendChild(s);
30     });
31   }
32 
33   async function generate(){
34     if (!start || !end) { alert("Informe início e fim."); return; }
35     if (start > end) { alert("Data inicial não pode ser maior que a final."); return; }
36     setBusy(true);
37     try {
38       await ensureJsPdf();
39 
40       // alunos
41       const stRes = await fetch(`/api/classes/${classId}/students`, { cache:"no-store" });
42       const stData = await stRes.json().catch(()=> ({}));
43       const students: Array<{ id:string; name:string }> =
44         (stRes.ok && stData?.ok && Array.isArray(stData.students)) ? stData.students : [];
45 
46       // chamadas
47       const chRes = await fetch(`/api/classes/${classId}/chamadas?order=asc`, { cache:"no-store" });
48       const chData = await chRes.json().catch(()=> ({}));
49       const chamadas: Array<{ seq:number; createdAt:string }> =
50         (chRes.ok && chData?.ok && Array.isArray(chData.attendances)) ? chData.attendances : [];
51 
52       const onlyDate = (iso:string) => (iso||"").slice(0,10);
53       const periodChamadas = chamadas.filter((c) => {
54         const d = onlyDate(c.createdAt);
55         return d && d >= start && d <= end;
56       });
57       const seqs:number[] = periodChamadas.map((c) => c.seq);
58 
59       // presenças
60       const presenceBySeq: Record<number, Record<string, boolean>> = {};
61       for (const seq of seqs) {
62         const prRes = await fetch(`/api/classes/${classId}/chamadas/${seq}/presences`, { cache:"no-store" });
63         const prData = await prRes.json().catch(()=> ({}));
64         const rows: Array<{ studentId:string; present:boolean }> =
65           (prRes.ok && prData?.ok && Array.isArray(prData.rows)) ? prData.rows : [];
66         const map: Record<string, boolean> = {};
67         for (const r of rows) map[r.studentId] = !!r.present;
68         students.forEach((s)=> { if (!(s.id in map)) map[s.id] = false; });
69         presenceBySeq[seq] = map;
70       }
71 
72       // métricas
73       const totalAlunos = students.length;
74       let somaPresentes = 0;
75       const faltas = new Map<string, number>();
76       students.forEach((s)=> faltas.set(s.id, 0));
77 
78       for (const seq of seqs) {
79         const pres = presenceBySeq[seq] || {};
80         let presentes = 0;
81         students.forEach((s)=>{
82           if (pres[s.id]) presentes++;
83           else faltas.set(s.id, (faltas.get(s.id) || 0) + 1);
84         });
85         somaPresentes += presentes;
86       }
87 
88       const totalAulas = seqs.length;
89       const mediaPresentesAbs = totalAulas ? Math.round((somaPresentes/totalAulas)*100)/100 : 0;
90       const mediaPercentual = (totalAulas && totalAlunos) ? Math.round((mediaPresentesAbs/totalAlunos)*10000)/100 : 0;
91 
92       const ranking: RankRow[] = students
93         .map<RankRow>((s)=> ({ name:s.name, faltas: faltas.get(s.id) || 0 }))
94         .sort((a:RankRow, b:RankRow) => b.faltas - a.faltas);
95 
96       // PDF
97       // @ts-ignore
98       const { jsPDF } = (window as any).jspdf;
99       const doc = new jsPDF({ unit:"pt", format:"a4" });
100       const pageW = doc.internal.pageSize.getWidth();
101       const pageH = doc.internal.pageSize.getHeight();
102       const margin = 40;
103       let y = margin;
104 
105       doc.setFont("helvetica","bold"); doc.setFontSize(14);
106       doc.text(`Relatório de Chamadas — ${className}`, margin, y); y += 18;
107       doc.setFont("helvetica","normal"); doc.setFontSize(10);
108       doc.text(`Período: ${start} a ${end}`, margin, y); y += 18;
109 
110       // cards
111       const cardW = (pageW - margin*2 - 16*2) / 3;
112       const cardH = 56;
113       const cards = [
114         { label:"Total de alunos", value:String(totalAlunos) },
115         { label:"Média de presentes (abs.)", value:String(mediaPresentesAbs) },
116         { label:"Média de presença (%)", value:String(mediaPercentual)+"%" },
117       ];
118       doc.setDrawColor(230); doc.setLineWidth(1);
119       cards.forEach((c,i)=>{
120         const x = margin + i*(cardW+16);
121         doc.roundedRect(x, y, cardW, cardH, 8, 8);
122         doc.setFontSize(9); doc.setTextColor(100);
123         doc.text(c.label, x+10, y+18);
124         doc.setFont("helvetica","bold"); doc.setFontSize(18); doc.setTextColor(0);
125         doc.text(c.value, x+10, y+42);
126         doc.setFont("helvetica","normal"); doc.setFontSize(10); doc.setTextColor(0);
127       });
128       y += cardH + 24;
129 
130       // ranking
131       doc.setFont("helvetica","bold"); doc.setFontSize(12);
132       doc.text("Ranking dos mais faltosos", margin, y); y += 14;
133       doc.setFont("helvetica","normal"); doc.setFontSize(10);
134 
135       const col1 = margin, col2 = margin+40, col3 = pageW - margin - 60;
136       // cabeçalho
137       doc.setFillColor(249,250,251);
138       doc.rect(margin, y-10, pageW - margin*2, 22, "F");
139       doc.setFont("helvetica","bold");
140       doc.text("#", col1, y);
141       doc.text("Aluno", col2, y);
142       doc.text("Faltas", col3, y);
143       y += 14;
144       doc.setFont("helvetica","normal");
145 
146       const rowH = 16;
147       for (let i=0;i<ranking.length;i++){
148         const r = ranking[i];
149         if (y > pageH - margin) { doc.addPage(); y = margin; }
150         doc.text(String(i+1), col1, y);
151         const nomeLines = doc.splitTextToSize(r.name, col3 - col2 - 10);
152         doc.text(nomeLines, col2, y);
153         doc.text(String(r.faltas), col3, y);
154         y += rowH + (nomeLines.length-1)*10;
155       }
156 
157       const footer = `Total de aulas consideradas: ${seqs.length}`;
158       doc.setFontSize(9); doc.setTextColor(120);
159       doc.text(footer, margin, pageH - margin/2);
160 
161       const file = `Relatorio_Chamadas_${className.replace(/\\s+/g,"_")}_${start}_a_${end}.pdf`;
162       doc.save(file);
163       setOpen(false);
164     } catch (e:any) {
165       console.error(e);
166       alert(e?.message || "Falha ao gerar PDF.");
167     } finally {
168       setBusy(false);
169     }
170   }
171 
172   return (
173     <>
174       <button
175         type="button"
176         className="rounded-xl border px-4 py-2 text-sm font-medium text-gray-800 hover:border-blue-400 hover:text-blue-700"
177         title="Gerar relatório de presenças (PDF) por período"
178         onClick={()=>setOpen(true)}
179       >Relatório Chamadas</button>
180 
181       {open && (
182         <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 p-4">
183           <div className="w-full max-w-md rounded-2xl bg-white p-5 shadow-xl">
184             <h3 className="text-lg font-semibold text-gray-900">Relatório de Chamadas (PDF)</h3>
185             <p className="text-sm text-gray-600 mt-1">Escolha o período para consolidar presenças.</p>
186 
187             <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-3">
188               <label className="grid gap-1 text-sm">
189                 <span className="text-gray-700">Início</span>
190                 <input value={start} onChange={e=>setStart(e.target.value)} type="date" className="rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200" required />
191               </label>
192               <label className="grid gap-1 text-sm">
193                 <span className="text-gray-700">Fim</span>
194                 <input value={end} onChange={e=>setEnd(e.target.value)} type="date" className="rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-blue-200" required />
195               </label>
196             </div>
197 
198             <div className="mt-5 flex items-center justify-end gap-2">
199               <button type="button" onClick={()=>setOpen(false)} className="rounded-xl border px-3 py-2 text-sm hover:border-blue-400 hover:text-blue-700">Cancelar</button>
200               <button type="button" onClick={generate} disabled={busy} className="rounded-xl bg-[#0A66FF] px-4 py-2 text-sm font-medium text-white shadow hover:opacity-90">
201                 {busy ? "Gerando..." : "Gerar PDF"}
202               </button>
203             </div>
204           </div>
205         </div>
206       )}
207     </>
208   );
209 }

===== lib/prisma.ts =====
1 import { PrismaClient } from "@prisma/client";
2 
3 const globalForPrisma = globalThis as unknown as { prisma?: PrismaClient };
4 
5 export const prisma =
6   globalForPrisma.prisma ??
7   new PrismaClient({
8     log: ["error", "warn"],
9   });
10 
11 if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;

===== styles/globals.css =====
1 
2 
3 :root {
4   --color-brand-blue: #0A66FF;
5 }
6 .bg-brand-blue { background-color: var(--color-brand-blue); }
7 
8 
9 /* Utilitário de sombra suave para cards */
10 .shadow-soft { box-shadow: 0 1px 2px rgba(16,24,40,.06), 0 4px 12px rgba(16,24,40,.08); }

===== package.json =====
1 {
2   "name": "educc",
3   "private": true,
4   "version": "0.1.0",
5   "type": "module",
6   "scripts": {
7     "dev": "next dev",
8     "build": "pnpm prisma:gen && next build",
9     "start": "next start",
10     "typecheck": "tsc --noEmit",
11     "prisma:gen": "prisma generate",
12     "prisma:push": "prisma db push",
13     "prisma:studio": "prisma studio",
14     "postinstall": "prisma generate",
15     "icons": "tsx scripts/generate-icons.ts",
16     "lint": "eslint ."
17   },
18   "dependencies": {
19     "@prisma/client": "^6.17.0",
20     "bcryptjs": "^3.0.2",
21     "csv-parse": "^6.1.0",
22     "lucide-react": "^0.453.0",
23     "next": "15.0.0",
24     "next-pwa": "^5.6.0",
25     "react": "19.0.0",
26     "react-dom": "19.0.0",
27     "zod": "^3.23.8"
28   },
29   "devDependencies": {
30     "@babel/core": "^7.28.4",
31     "@eslint/eslintrc": "^3.3.1",
32     "@tailwindcss/postcss": "4.1.14",
33     "@types/node": "^22.7.4",
34     "@types/react": "^19.0.0",
35     "babel-loader": "^10.0.0",
36     "eslint": "^9.37.0",
37     "eslint-config-next": "^15.5.4",
38     "prisma": "^6.17.0",
39     "sharp": "^0.34.4",
40     "tailwindcss": "4.1.14",
41     "tsx": "^4.20.6",
42     "typescript": "^5.6.3",
43     "xlsx": "^0.18.5"
44   },
45   "engines": {
46     "node": "^20"
47   },
48   "pnpm": {
49     "allowScripts": {
50       "@prisma/client": true,
51       "prisma": true,
52       "@tailwindcss/oxide": true,
53       "sharp": true
54     }
55   }
56 }

===== public/templates/CONTENTS_README.txt =====
1 CAMPOS (todos em uma linha de cabeçalho):
2 - Aula (número sequencial da aula)
3 - Título
4 - Conteúdo da Aula
5 - Objetivos
6 - Desenvolvimento das Atividades
7 - Recursos Didáticos
8 - BNCC
9 
10 Somente "Título" e "Conteúdo da Aula" serão considerados obrigatórios no formulário manual.

===== next.config.js =====
1 import withPWA from "next-pwa";
2 
3 const isProd = process.env.NODE_ENV === "production";
4 
5 const runtimeCaching = [
6   { urlPattern: ({ request }) => request.mode === "navigate",
7     handler: "NetworkFirst",
8     options: { cacheName: "pages", expiration: { maxEntries: 50, maxAgeSeconds: 7*24*3600 } } },
9   { urlPattern: /_next\/static\/.*/i,
10     handler: "StaleWhileRevalidate",
11     options: { cacheName: "next-static" } },
12   { urlPattern: /\/icons\/.*\.png$/i,
13     handler: "CacheFirst",
14     options: { cacheName: "icons", expiration: { maxEntries: 16 } } },
15   { urlPattern: /\.(?:png|jpg|jpeg|svg|gif|webp|avif)$/i,
16     handler: "StaleWhileRevalidate",
17     options: { cacheName: "images" } },
18   { urlPattern: /\/api\/.*/i,
19     handler: "NetworkFirst",
20     options: { cacheName: "api", networkTimeoutSeconds: 3 } }
21 ];
22 
23 // ⬇️ eslint deve ficar aqui (fora do withPWA)
24 const baseConfig = {
25   reactStrictMode: true,
26   eslint: { ignoreDuringBuilds: true }
27 };
28 
29 export default withPWA({
30   dest: "public",
31   disable: !isProd,
32   register: true,
33   skipWaiting: true,
34   runtimeCaching,
35   fallbacks: { document: "/offline.html" }
36 })(baseConfig);

===== next.config.mjs =====
1 // next.config.mjs — PWA habilitado em produção
2 import withPWA from 'next-pwa';
3 
4 const isDev = process.env.NODE_ENV !== 'production';
5 
6 export default withPWA({
7   dest: 'public',
8   register: true,
9   skipWaiting: true,
10   disable: isDev,
11   fallbacks: { document: '/offline' },
12   // Ajustes finos de cache (opcional)
13   runtimeCaching: [
14     {
15       urlPattern: ({ request }) => request.destination === 'image',
16       handler: 'CacheFirst',
17       options: { cacheName: 'images', expiration: { maxEntries: 100, maxAgeSeconds: 60 * 60 * 24 * 30 } }
18     },
19     {
20       urlPattern: ({ request }) => ['style','script','font'].includes(request.destination),
21       handler: 'StaleWhileRevalidate',
22       options: { cacheName: 'assets' }
23     }
24   ]
25 })({
26   // Outras opções do projeto (se precisar)
27 });

===== next.config.ts =====
1 import type { NextConfig } from "next";
2 
3 const nextConfig: NextConfig = {
4   /* config options here */
5 };
6 
7 export default nextConfig;

===== lib/session.ts =====
1 import { cookies, headers } from "next/headers";
2 import { prisma } from "@/lib/prisma";
3 
4 const COOKIE_NAME = "session_user_id";
5 
6 /** Lê o userId do cookie (async em Next 15) */
7 export async function getSessionUserId(): Promise<string | null> {
8   try {
9     const c = await cookies();
10     const id = c.get(COOKIE_NAME)?.value || null;
11     return id;
12   } catch {
13     // Fallback para contexts onde cookies() não está disponível
14     const h = await headers();
15     const cookieHeader = h.get("cookie") || "";
16     const m = cookieHeader.match(new RegExp(`${COOKIE_NAME}=([^;]+)`));
17     return m ? m[1] : null;
18   }
19 }
20 
21 /** Busca o usuário logado; retorna null se não houver */
22 export async function requireUser() {
23   const id = await getSessionUserId();
24   if (!id) return null;
25   const user = await prisma.user.findUnique({
26     where: { id },
27     select: { id: true, name: true, email: true }
28   });
29   return user;
30 }
31 
32 /** Apaga o cookie de sessão (async em Next 15) */
33 export async function clearSessionCookie() {
34   const c = await cookies();
35   c.set({
36     name: COOKIE_NAME,
37     value: "",
38     httpOnly: true,
39     path: "/",
40     maxAge: 0
41   });
42 }

===== middleware.ts =====
1 import { NextResponse } from "next/server";
2 import type { NextRequest } from "next/server";
3 
4 export function middleware(req: NextRequest) {
5   const path = req.nextUrl.pathname;
6 
7   // Corrige / (auth) /register e / (auth) /recover
8   if (path === "/(auth)/register") {
9     const url = req.nextUrl.clone();
10     url.pathname = "/register";
11     return NextResponse.redirect(url);
12   }
13   if (path === "/(auth)/recover") {
14     const url = req.nextUrl.clone();
15     url.pathname = "/recover-email";
16     return NextResponse.redirect(url);
17   }
18 
19   return NextResponse.next();
20 }
21 
22 export const config = {
23   matcher: ["/(auth)/register", "/(auth)/recover"]
24 };
