
===== app/(auth)/login/page.tsx =====
1 import { Suspense } from "react";
2 import LoginCard from "@/components/LoginCard";
3 
4 export const dynamic = "force-dynamic";
5 
6 export default function LoginPage() {
7   return (
8     <main className="min-h-screen flex items-center justify-center p-6 bg-white">
9       <Suspense fallback={<div className="text-sm text-gray-600">Carregando…</div>}>
10         <LoginCard />
11       </Suspense>
12     </main>
13   );
14 }

===== components/LoginCard.tsx =====
1 "use client";
2 import { useState } from "react";
3 import Link from "next/link";
4 import { useRouter } from "next/navigation";
5 
6 export default function LoginCard() {
7   const router = useRouter();
8   const [email, setEmail] = useState("");
9   const [password, setPassword] = useState("");
10   const [loading, setLoading] = useState(false);
11   const [err, setErr] = useState<string | null>(null);
12 
13   async function onSubmit(e: React.FormEvent) {
14     e.preventDefault();
15     setLoading(true);
16     setErr(null);
17     try {
18       const res = await fetch("/api/auth/login", {
19         method: "POST",
20         headers: { "content-type": "application/json" },
21         body: JSON.stringify({ email, password })
22       });
23       const data = await res.json().catch(()=> ({}));
24       if (!res.ok || !data?.ok) {
25         setErr(data?.error ?? "Credenciais inválidas");
26       } else {
27         router.push("/dashboard");
28       }
29     } catch {
30       setErr("Falha de rede. Tente novamente.");
31     } finally {
32       setLoading(false);
33     }
34   }
35 
36   return (
37     <div className="card p-8 max-w-md w-full">
38       <div className="flex items-center justify-between mb-6">
39         <div className="flex items-center gap-3">
40           <span className="inline-block h-4 w-4 rounded-full bg-[var(--color-brand-blue)]" />
41           <span className="font-semibold">EDUCC</span>
42         </div>
43         <Link href="/recover-email" className="text-sm text-[var(--color-brand-blue)] hover:underline">
44           Esqueci minha senha
45         </Link>
46       </div>
47 
48       <h1 className="text-2xl font-semibold mb-1">Entrar</h1>
49       <p className="text-sm text-gray-500 mb-6">Acesse sua conta</p>
50 
51       <form onSubmit={onSubmit} className="space-y-4">
52         <div>
53           <label className="block text-sm mb-1">E-mail</label>
54           <input
55             className="input"
56             type="email"
57             placeholder="exemplo@email.com"
58             value={email}
59             onChange={(e) => setEmail(e.target.value)}
60             required
61           />
62         </div>
63 
64         <div>
65           <label className="block text-sm mb-1">Senha</label>
66           <input
67             className="input"
68             type="password"
69             placeholder="Sua senha"
70             value={password}
71             onChange={(e) => setPassword(e.target.value)}
72             required
73             minLength={8}
74             autoComplete="current-password"
75           />
76         </div>
77 
78         {err && <p className="text-sm text-red-600">{err}</p>}
79 
80         <button type="submit" className="btn-primary w-full" disabled={loading}>
81           {loading ? "Entrando..." : "Entrar"}
82         </button>
83       </form>
84 
85       <p className="text-sm text-gray-600 mt-6">
86         Não tem conta?{" "}
87         <Link href="/register" className="text-[var(--color-brand-blue)] hover:underline">
88           Criar conta
89         </Link>
90       </p>
91     </div>
92   );
93 }

===== app/api/auth/login/route.ts =====
1 import { NextResponse } from "next/server";
2 import { prisma } from "@/lib/prisma";
3 import { z } from "zod";
4 import bcrypt from "bcryptjs";
5 import { cookies } from "next/headers";
6 
7 const schema = z.object({
8   email: z.string().email(),
9   password: z.string().min(8)
10 });
11 
12 const COOKIE_NAME = "session_user_id";
13 
14 export async function POST(req: Request) {
15   try {
16     const body = await req.json().catch(() => ({}));
17     const parsed = schema.safeParse(body);
18     if (!parsed.success) {
19       return NextResponse.json({ ok:false, error: parsed.error.flatten() }, { status: 400 });
20     }
21     const { email, password } = parsed.data;
22 
23     const where = { email: email.toLowerCase() };
24 
25     const user = await prisma.user.findUnique({
26       where,
27       select: { id: true, name: true, email: true, passwordHash: true }
28     });
29 
30     // resposta genérica para não dar dica
31     const invalid = NextResponse.json({ ok:false, error: "Credenciais inválidas" }, { status: 401 });
32 
33     if (!user || !user.passwordHash) return invalid;
34 
35     const ok = await bcrypt.compare(password, user.passwordHash);
36     if (!ok) return invalid;
37 
38     const c = await cookies();
39     // cookie simples; se quiser, migramos para JWT com expiração/refresh
40     c.set({
41       name: COOKIE_NAME,
42       value: user.id,
43       httpOnly: true,
44       path: "/",
45       sameSite: "lax",
46       // sem maxAge => cookie de sessão; podemos colocar expiração se preferir
47     });
48 
49     return NextResponse.json({ ok:true, user: { id: user.id, name: user.name, email: user.email } });
50   } catch (err:any) {
51     return NextResponse.json({ ok:false, error: err?.message ?? "Erro" }, { status: 500 });
52   }
53 }

===== app/api/auth/me/route.ts =====
1 import { NextResponse } from "next/server";
2 import { requireUser } from "@/lib/session";
3 
4 export async function GET() {
5   const user = await requireUser();
6   if (!user) return NextResponse.json({ ok:false }, { status: 401 });
7   return NextResponse.json({ ok:true, user });
8 }

===== app/api/auth/logout/route.ts =====
1 import { NextResponse } from "next/server";
2 import { clearSessionCookie } from "@/lib/session";
3 
4 export async function POST() {
5   try {
6     await clearSessionCookie();
7     return NextResponse.json({ ok:true });
8   } catch {
9     return NextResponse.json({ ok:false }, { status: 500 });
10   }
11 }

===== styles/globals.css =====
1 
2 
3 :root {
4   --color-brand-blue: #0A66FF;
5 }
6 .bg-brand-blue { background-color: var(--color-brand-blue); }
7 
8 
9 /* Utilitário de sombra suave para cards */
10 .shadow-soft { box-shadow: 0 1px 2px rgba(16,24,40,.06), 0 4px 12px rgba(16,24,40,.08); }
11 
12 /* ===== Stack de ações da turma ===== */
13 .actions-stack {
14   max-width: 28rem;        /* ~448px, mantém o bloco elegante */
15   margin-left: auto;
16   margin-right: auto;
17 }
18 .actions-stack a,
19 .actions-stack button {
20   width: 100%;             /* todos os botões 100% dentro do stack */
21   text-align: center;
22   padding-top: 0.875rem;   /* py-3.5 */
23   padding-bottom: 0.875rem;
24   font-size: 1rem;         /* text-base */
25   border-radius: 0.75rem;  /* rounded-xl */
26 }
27 
28 /* ===== Correção da stack de ações: links/botões grandes e 100% ===== */
29 .actions-stack a,
30 .actions-stack button {
31   display: block;          /* <— chave para respeitar width */
32   width: 100%;
33   text-align: center;
34   padding-top: 0.875rem;   /* ~py-3.5 */
35   padding-bottom: 0.875rem;
36   padding-left: 1rem;
37   padding-right: 1rem;
38   font-size: 1rem;         /* text-base */
39   border-radius: 0.75rem;  /* rounded-xl */
40 }
41 .actions-stack a { text-decoration: none; }

===== app/globals.css =====
1 @import "tailwindcss";
2 
3 @theme {
4   --color-brand-blue: #0A66FF;
5   --shadow-card: 0 1px 2px rgba(0,0,0,0.06), 0 8px 24px rgba(0,0,0,0.08);
6   --radius-xl: 0.75rem;
7 }
8 
9 :root { color-scheme: light; }
10 html, body { height: 100%; }
11 
12 .btn-primary {
13   @apply px-6 py-3 font-semibold text-white disabled:opacity-50;
14   background-color: var(--color-brand-blue);
15   border-radius: var(--radius-xl);
16 }
17 .input {
18   @apply w-full border border-gray-200 px-4 py-3 outline-none focus:ring-2;
19   border-radius: var(--radius-xl);
20   --tw-ring-color: color-mix(in oklab, var(--color-brand-blue) 40%, transparent);
21 }
22 .card {
23   @apply bg-white border border-gray-100;
24   border-radius: calc(var(--radius-xl) * 1.333);
25   box-shadow: var(--shadow-card);
26 }
27 
28 /* ===== Stack de ações da turma (botões grandes em coluna) ===== */
29 .actions-stack { 
30   max-width: 28rem;        /* ~448px */
31   margin-inline: auto; 
32 }
33 .actions-stack a,
34 .actions-stack button {
35   width: 100%;
36   text-align: center;
37   padding: 0.875rem 1rem;  /* ~py-3.5 */
38   font-size: 1rem;         /* text-base */
39   border-radius: 0.75rem;  /* rounded-xl */
40 }
41 
42 /* Espaçamento e largura total só para os botões DIRETOS do wrapper do ReportButton
43    (não afeta botões dentro dos modais) */
44 .actions-stack .w-full > button,
45 .actions-stack .w-full > a {
46   display: block;
47   width: 100%;
48 }
49 
50 .actions-stack .w-full > button + button,
51 .actions-stack .w-full > a + button,
52 .actions-stack .w-full > button + a,
53 .actions-stack .w-full > a + a {
54   margin-top: 0.75rem; /* ~mt-3 */
55 }
56 
57 /* === Stack vertical de ações: todos os filhos com mesma largura/alinhamento === */
58 .actions-stack { 
59   max-width: 28rem;          /* largura do bloco de ações */
60   margin-inline: auto;
61 }
62 .actions-stack > * {
63   width: 100%;               /* cada item (Link, div do ReportButton etc.) ocupa 100% */
64 }
65 .actions-stack a,
66 .actions-stack button {
67   display: block;
68   width: 100%;
69   text-align: center;
70   padding: 0.875rem 1rem;     /* py-3.5 */
71   font-size: 1rem;            /* text-base */
72   border-radius: 0.75rem;     /* rounded-xl */
73   box-sizing: border-box;     /* evita “pular” largura por causa da borda */
74 }
75 
76 /* Espaço entre os DOIS botões do ReportButton quando renderizados na stack */
77 .actions-stack .w-full > a,
78 .actions-stack .w-full > button {
79   width: 100%;
80 }
81 .actions-stack .w-full > a + a,
82 .actions-stack .w-full > a + button,
83 .actions-stack .w-full > button + a,
84 .actions-stack .w-full > button + button {
85   margin-top: 0.75rem;        /* ~mt-3 */
86 }

===== lib/session.ts =====
1 import { cookies, headers } from "next/headers";
2 import { prisma } from "@/lib/prisma";
3 import { ClassRole } from "@prisma/client";
4 
5 const COOKIE_NAME = "session_user_id";
6 
7 /** Lê o userId do cookie (async em Next 15) */
8 export async function getSessionUserId(): Promise<string | null> {
9   try {
10     const c = await cookies();
11     const id = c.get(COOKIE_NAME)?.value || null;
12     return id;
13   } catch {
14     // Fallback para contexts onde cookies() não está disponível
15     const h = await headers();
16     const cookieHeader = h.get("cookie") || "";
17     const m = cookieHeader.match(new RegExp(`${COOKIE_NAME}=([^;]+)`));
18     return m ? m[1] : null;
19   }
20 }
21 
22 /** Busca o usuário logado; retorna null se não houver */
23 export async function requireUser() {
24   const id = await getSessionUserId();
25   if (!id) return null;
26   const user = await prisma.user.findUnique({
27     where: { id },
28     select: { id: true, name: true, email: true }
29   });
30   return user;
31 }
32 
33 /** Apaga o cookie de sessão (async em Next 15) */
34 export async function clearSessionCookie() {
35   const c = await cookies();
36   c.set({
37     name: COOKIE_NAME,
38     value: "",
39     httpOnly: true,
40     path: "/",
41     maxAge: 0
42   });
43 }
44 
45 // === Access helpers (ClassAccess) ============================================
46 
47 /**
48  * Retorna o papel do usuário na turma (PROFESSOR | GESTOR) ou null se não tem acesso.
49  */
50 export async function getRole(userId: string, classId: string): Promise<ClassRole | null> {
51   try {
52     const row = await prisma.classAccess.findFirst({
53       where: { classId, userId },
54       select: { role: true },
55     });
56     return row?.role ?? null;
57   } catch (_e) {
58     return null;
59   }
60 }
61 
62 /** Versão que usa o usuário logado da sessão atual. */
63 export async function getMyRole(classId: string): Promise<ClassRole | null> {
64   const me = await requireUser();
65   if (!me) return null;
66   return getRole(me.id, classId);
67 }
68 
69 /** Açúcares para checagens rápidas na UI/rota. */
70 export function roleFlags(role: ClassRole | null) {
71   return {
72     isProfessor: role === "PROFESSOR",
73     isGestor: role === "GESTOR",
74     hasAccess: role === "PROFESSOR" || role === "GESTOR",
75   };
76 }
