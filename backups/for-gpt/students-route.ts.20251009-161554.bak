import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { requireUser } from "@/lib/session";
import { z } from "zod";

// Apenas nome é obrigatório.
// cpf e contact são opcionais (salvos como null se ausentes).
const createSchema = z.object({
  name: z.string().trim().min(2, "Nome muito curto"),
  cpf: z.string().trim().optional(),
  contact: z.string().trim().optional(),
});

export async function GET(_req: Request, ctx: { params: Promise<{ id: string }> }) {
  const { id } = await ctx.params;
  const user = await requireUser();
  if (!user) return NextResponse.json({ ok: false }, { status: 401 });

  const cls = await prisma.class.findFirst({ where: { id, ownerId: user.id }, select: { id: true } });
  if (!cls) return NextResponse.json({ ok: false, error: "Turma não encontrada" }, { status: 404 });

  const students = await prisma.student.findMany({
    where: { classId: id },
    orderBy: { name: "asc" },
    select: { id: true, name: true, cpf: true, contact: true },
  });

  return NextResponse.json({ ok: true, students });
}

export async function POST(req: Request, ctx: { params: Promise<{ id: string }> }) {
  const { id } = await ctx.params;
  const user = await requireUser();
  if (!user) return NextResponse.json({ ok: false }, { status: 401 });

  const cls = await prisma.class.findFirst({ where: { id, ownerId: user.id }, select: { id: true } });
  if (!cls) return NextResponse.json({ ok: false, error: "Turma não encontrada" }, { status: 404 });

  const body = await req.json().catch(() => ({}));
  const parsed = createSchema.safeParse(body);
  if (!parsed.success) {
    return NextResponse.json({ ok: false, error: parsed.error.flatten() }, { status: 400 });
  }

  const { name, cpf, contact } = parsed.data;

  const student = await prisma.student.create({
    data: {
      name,
      classId: id,
      cpf: cpf && cpf.length ? cpf : null,
      contact: contact && contact.length ? contact : null,
    },
    select: { id: true, name: true, cpf: true, contact: true },
  });

  return NextResponse.json({ ok: true, student }, { status: 201 });
}
