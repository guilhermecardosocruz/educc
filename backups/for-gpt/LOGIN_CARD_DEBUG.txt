
===== components/LoginCard.tsx =====
1 "use client";
2 import { useState } from "react";
3 import Link from "next/link";
4 import { useRouter } from "next/navigation";
5 
6 export default function LoginCard() {
7   const router = useRouter();
8   const [email, setEmail] = useState("");
9   const [password, setPassword] = useState("");
10   const [show, setShow] = useState(false);
11   const [loading, setLoading] = useState(false);
12   const [err, setErr] = useState<string | null>(null);
13 
14   async function onSubmit(e: React.FormEvent) {
15     e.preventDefault();
16     setLoading(true);
17     setErr(null);
18     try {
19       const res = await fetch("/api/auth/login", {
20         method: "POST",
21         headers: { "content-type": "application/json" },
22         body: JSON.stringify({ email, password })
23       });
24       const data = await res.json().catch(()=> ({}));
25       if (!res.ok || !data?.ok) {
26         setErr(data?.error ?? "Credenciais inválidas");
27       } else {
28         router.push("/dashboard");
29       }
30     } catch {
31       setErr("Falha de rede. Tente novamente.");
32     } finally {
33       setLoading(false);
34     }
35   }
36 
37   return (
38     <div className="card p-8 max-w-md w-full">
39       <div className="flex items-center justify-between mb-6">
40         <div className="flex items-center gap-3">
41           <span className="inline-block h-4 w-4 rounded-full bg-[var(--color-brand-blue)]" />
42           <span className="font-semibold">EDUCC</span>
43         </div>
44         <Link href="/recover-email" className="text-sm text-[var(--color-brand-blue)] hover:underline">
45           Esqueci minha senha
46         </Link>
47       </div>
48 
49       <h1 className="text-2xl font-semibold mb-1">Entrar</h1>
50       <p className="text-sm text-gray-500 mb-6">Acesse sua conta</p>
51 
52       <form onSubmit={onSubmit} className="space-y-4">
53         <div>
54           <label className="block text-sm mb-1">E-mail</label>
55           <input
56             className="input"
57             type="email"
58             placeholder="exemplo@email.com"
59             value={email}
60             onChange={(e) => setEmail(e.target.value)}
61             required
62           />
63         </div>
64 
65         <div>
66           <label className="block text-sm mb-1">Senha</label>
67           <div className="relative">
68             <input
69               className="input pr-12"
70               type={show ? "text" : "password"}
71               placeholder="Sua senha"
72               value={password}
73               onChange={(e) => setPassword(e.target.value)}
74               required
75               minLength={8}
76               autoComplete="current-password"
77             />
78             <button
79               type="button"
80               onClick={() => setShow(v => !v)}
81               aria-label={show ? "Ocultar senha" : "Mostrar senha"}
82               title={show ? "Ocultar senha" : "Mostrar senha"}
83               className="absolute inset-y-0 right-0 px-3 flex items-center text-gray-500 hover:text-gray-700"
84             >
85               {show ? (
86                 <svg width="20" height="20" viewBox="0 0 24 24" aria-hidden="true">
87                   <path d="M12 5C6.5 5 2.3 8.7 1 12c1.3 3.3 5.5 7 11 7s9.7-3.7 11-7c-1.3-3.3-5.5-7-11-7Z" fill="currentColor" opacity=".15"/>
88                   <path d="M12 8a4 4 0 1 1 0 8 4 4 0 0 1 0-8Zm0-3C6.5 5 2.3 8.7 1 12c1.3 3.3 5.5 7 11 7s9.7-3.7 11-7c-1.3-3.3-5.5-7-11-7Z" stroke="currentColor" strokeWidth="1.5" fill="none"/>
89                 </svg>
90               ) : (
91                 <svg width="20" height="20" viewBox="0 0 24 24" aria-hidden="true">
92                   <path d="M3 3l18 18" stroke="currentColor" strokeWidth="1.8" strokeLinecap="round"/>
93                   <path d="M10.6 6.2A6.7 6.7 0 0 1 12 6c5.5 0 9.7 3.7 11 7-.5 1.2-1.3 2.4-2.4 3.5M6 7.6C3.9 8.9 2.4 10.4 1 13c.7 1.7 2.4 3.5 4.7 4.8 2.2 1.2 4.3 1.6 6.3 1.5 1.1-.1 2.2-.3 3.2-.7" stroke="currentColor" strokeWidth="1.5" fill="none" strokeLinecap="round"/>
94                   <circle cx="12" cy="12" r="3.5" fill="currentColor" opacity=".15"/>
95                 </svg>
96               )}
97             </button>
98           </div>
99         </div>
100 
101         {err && <p className="text-sm text-red-600">{err}</p>}
102 
103         <button type="submit" className="btn-primary w-full" disabled={loading}>
104           {loading ? "Entrando..." : "Entrar"}
105         </button>
106       </form>
107 
108       <p className="text-sm text-gray-600 mt-6">
109         Não tem conta?{" "}
110         <Link href="/register" className="text-[var(--color-brand-blue)] hover:underline">
111           Criar conta
112         </Link>
113       </p>
114     </div>
115   );
116 }

===== components/DevSwKiller.tsx =====
1 'use client';
2 
3 import { useEffect } from 'react';
4 
5 export default function DevSwKiller() {
6   useEffect(() => {
7     if (typeof window === 'undefined') return;
8     if (process.env.NODE_ENV === 'production') return;
9 
10     // Desregistrar todos os service workers
11     if ('serviceWorker' in navigator) {
12       navigator.serviceWorker.getRegistrations().then((regs) => {
13         regs.forEach((reg) => reg.unregister().catch(() => {}));
14       }).catch(() => {});
15     }
16 
17     // Limpar caches (Workbox/Next-PWA)
18     if ('caches' in window) {
19       caches.keys().then((keys) => {
20         keys.forEach((k) => caches.delete(k).catch(() => {}));
21       }).catch(() => {});
22     }
23   }, []);
24 
25   return null;
26 }
