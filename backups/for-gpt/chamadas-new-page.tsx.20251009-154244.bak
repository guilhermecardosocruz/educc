"use client";

import Link from "next/link";
import { useRouter, useParams } from "next/navigation";
import { useEffect, useMemo, useRef, useState } from "react";

type Student = { id: string; name: string; cpf: string | null; contact: string | null };

export default function NewCallPage() {
  const router = useRouter();
  const { id } = useParams<{ id: string }>();

  const [title, setTitle] = useState("");
  const [students, setStudents] = useState<Student[]>([]);
  const [presence, setPresence] = useState<Record<string, boolean>>({});
  const [saving, setSaving] = useState(false);

  const [uploadName, setUploadName] = useState<string | null>(null);
  const [uploadFile, setUploadFile] = useState<File | null>(null);
  const [importing, setImporting] = useState(false);
  const fileRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    (async () => {
      if (!id) return;
      const res = await fetch(`/api/classes/${id}/students`, { cache: "no-store" });
      const data = await res.json();
      if (data?.ok && Array.isArray(data.students)) {
        setStudents(data.students);
        const initial: Record<string, boolean> = {};
        for (const s of data.students) initial[s.id] = true; // default: todos presentes
        setPresence(initial);
      }
    })();
  }, [id]);

  function toggleStudent(studentId: string) {
    setPresence((p) => ({ ...p, [studentId]: !p[studentId] }));
  }
  function setAll(v: boolean) {
    const all: Record<string, boolean> = {};
    for (const s of students) all[s.id] = v;
    setPresence(all);
  }

  async function handleImportSend() {
    if (!id || !uploadFile) {
      alert("Selecione um arquivo CSV/XLSX antes de enviar.");
      return;
    }
    setImporting(true);
    try {
      const fd = new FormData();
      fd.append("file", uploadFile);

      const res = await fetch(`/api/classes/${id}/students/import`, { method: "POST", body: fd });
      const data = await res.json();
      if (!res.ok || !data?.ok) throw new Error(data?.error || "Falha ao importar");

      alert(`Importados: ${data.createdCount}`);

      const res2 = await fetch(`/api/classes/${id}/students`, { cache: "no-store" });
      const data2 = await res2.json();
      if (data2?.ok && Array.isArray(data2.students)) {
        setStudents(data2.students);
        const next: Record<string, boolean> = {};
        for (const s of data2.students) next[s.id] = true;
        setPresence(next);
      }
    } catch (e) {
      alert("Erro ao importar planilha");
      console.error(e);
    } finally {
      setImporting(false);
      setUploadName(null);
      setUploadFile(null);
      if (fileRef.current) fileRef.current.value = "";
    }
  }

  async function handleCreate() {
    if (!id) return;
    setSaving(true);
    try {
      const res = await fetch(`/api/classes/${id}/chamadas`, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify({ title: title.trim() || undefined })
      });
      const data = await res.json();
      if (!res.ok || !data?.ok) throw new Error(data?.error || "Falha ao criar");

      const seq: number = data.attendance.seq;
      const presences = students.map((s) => ({ studentId: s.id, present: !!presence[s.id] }));

      const res2 = await fetch(`/api/classes/${id}/chamadas/${seq}/presences`, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify({ presences })
      });
      const d2 = await res2.json();
      if (!res2.ok || !d2?.ok) throw new Error(d2?.error || "Falha ao salvar presenças");

      router.push(`/classes/${id}/chamadas/${seq}`);
    } catch (e) {
      alert("Erro ao criar/salvar chamada");
      console.error(e);
    } finally {
      setSaving(false);
    }
  }

  const totalPresentes = useMemo(
    () => students.reduce((acc, s) => acc + (presence[s.id] ? 1 : 0), 0),
    [students, presence]
  );

  return (
    <main className="mx-auto max-w-5xl px-4 py-6">
      <header className="mb-4 flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-semibold">Nova chamada</h1>
          <p className="text-sm text-gray-600">Marque presença e crie a chamada.</p>
        </div>
        <div className="flex items-center gap-2">
          <Link
            href={`/classes/${id}/chamadas`}
            className="rounded-xl border px-3 py-1.5 text-sm hover:border-blue-500 hover:text-blue-600"
          >
            Cancelar
          </Link>
          <button
            type="button"
            onClick={handleCreate}
            disabled={saving}
            className="rounded-xl bg-[#0A66FF] px-4 py-2 text-sm text-white hover:opacity-90 disabled:opacity-60"
            title="Cria a chamada e salva as presenças"
          >
            {saving ? "Salvando..." : "Criar chamada"}
          </button>
        </div>
      </header>

      <section className="rounded-2xl border p-4 mb-4">
        <label className="text-sm font-medium">Nome da aula</label>
        <input
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="Ex.: Aula 01 - Introdução"
          className="mt-1 w-full rounded-xl border px-3 py-2"
        />
      </section>

      <section className="rounded-2xl border p-4 mb-4">
        <div className="flex flex-wrap items-center gap-2">
          <button
            type="button"
            className="rounded-xl border px-3 py-1.5 text-sm hover:border-blue-500 hover:text-blue-600"
            onClick={() => fileRef.current?.click()}
          >
            Importar alunos (CSV/XLSX)
          </button>
          <input
            ref={fileRef}
            type="file"
            accept=".csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel"
            className="hidden"
            onChange={(e) => {
              const f = e.target.files?.[0] || null;
              setUploadName(f ? f.name : null);
              setUploadFile(f);
            }}
          />
          {uploadName && <span className="text-sm text-gray-700">Selecionado: {uploadName}</span>}
          <button
            type="button"
            onClick={handleImportSend}
            disabled={!uploadFile || importing}
            className="rounded-xl border px-3 py-1.5 text-sm hover:border-blue-500 hover:text-blue-600 disabled:opacity-50"
          >
            {importing ? "Enviando..." : "Enviar planilha"}
          </button>

          <div className="flex gap-2 ml-auto">
            <a className="rounded-xl border px-3 py-1.5 text-sm hover:border-blue-500 hover:text-blue-600" href="/templates/students.csv" target="_blank" rel="noreferrer">
              Modelo CSV
            </a>
            <a className="rounded-xl border px-3 py-1.5 text-sm hover:border-blue-500 hover:text-blue-600" href="/templates/students.xlsx" target="_blank" rel="noreferrer">
              Modelo XLSX
            </a>
          </div>
        </div>
        <p className="text-xs text-gray-500 mt-2">Colunas: <b>name</b> (obrigatório), <b>cpf</b> (opcional), <b>contact</b> (opcional)</p>
      </section>

      {/* LISTA DE PRESENÇA — tons de azul, grade legível, zebra suave */}
      <section className="rounded-2xl overflow-hidden border">
        <div className="bg-blue-600 text-white px-4 py-3 flex items-center justify-between">
          <div className="font-semibold">Lista de presença</div>
          <div className="text-sm">
            Presentes: <b>{totalPresentes}</b> / {students.length}
          </div>
        </div>

        <div className="bg-blue-50 border-b border-blue-100 px-4 py-2 text-sm flex gap-2">
          <button className="rounded-lg border border-blue-200 px-3 py-1 hover:bg-blue-100" onClick={() => setAll(true)}>Marcar todos</button>
          <button className="rounded-lg border border-blue-200 px-3 py-1 hover:bg-blue-100" onClick={() => setAll(false)}>Desmarcar todos</button>
        </div>

        <div className="grid grid-cols-[64px_1fr_200px_120px] bg-blue-100/70 text-blue-900 text-sm font-medium border-b border-blue-200">
          <div className="px-3 py-2 border-r border-blue-200">#</div>
          <div className="px-3 py-2 border-r border-blue-200">Aluno</div>
          <div className="px-3 py-2 border-r border-blue-200 hidden sm:block">CPF</div>
          <div className="px-3 py-2">Presente</div>
        </div>

        <div className="max-h-[60vh] overflow-auto">
          {students.length === 0 ? (
            <div className="px-4 py-6 text-sm text-gray-600">Nenhum aluno cadastrado nesta turma.</div>
          ) : students.map((s, idx) => {
            const isEven = idx % 2 === 0;
            return (
              <div
                key={s.id}
                className={[
                  "grid grid-cols-[64px_1fr_200px_120px] items-center",
                  "text-sm",
                  "border-b border-blue-100",
                  isEven ? "bg-blue-50/40" : "bg-white"
                ].join(" ")}
              >
                <div className="px-3 py-2 border-r border-blue-100 text-gray-600">{idx + 1}</div>
                <div className="px-3 py-2 border-r border-blue-100">
                  <div className="font-medium text-gray-900">{s.name}</div>
                </div>
                <div className="px-3 py-2 border-r border-blue-100 hidden sm:block">
                  <span className="tabular-nums text-gray-700">{s.cpf || "-"}</span>
                </div>
                <div className="px-3 py-2">
                  <label className="inline-flex items-center gap-2">
                    <input
                      type="checkbox"
                      className="h-4 w-4 accent-blue-600"
                      checked={!!presence[s.id]}
                      onChange={() => toggleStudent(s.id)}
                    />
                    <span className="text-gray-700">Presente</span>
                  </label>
                </div>
              </div>
            );
          })}
        </div>
      </section>
    </main>
  );
}
