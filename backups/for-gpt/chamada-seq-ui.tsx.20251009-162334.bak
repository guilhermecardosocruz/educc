"use client";
import Link from "next/link";
import { useEffect, useMemo, useRef, useState } from "react";

type Student = { id: string; name: string; cpf: string | null; contact: string };

export default function ChamadaClient({
  classId,
  className,
  seq,
  initialTitle,
  initialStudents
}: {
  classId: string;
  className: string;
  seq: number;
  initialTitle: string;
  initialStudents: Student[];
}) {
  const [title, setTitle] = useState(initialTitle);
  const [savingTitle, setSavingTitle] = useState(false);

  const [students, setStudents] = useState<Student[]>(initialStudents);
  const [showAdd, setShowAdd] = useState(false);
  const [addForm, setAddForm] = useState({ name: "", cpf: "", contact: "" });
  const [adding, setAdding] = useState(false);

  const [editId, setEditId] = useState<string | null>(null);
  const [editForm, setEditForm] = useState({ name: "", contact: "" });
  const [editing, setEditing] = useState(false);
  const [moreId, setMoreId] = useState<string | null>(null);

  const fileRef = useRef<HTMLInputElement|null>(null);
  const [importing, setImporting] = useState(false);
  const [importMsg, setImportMsg] = useState<string | null>(null);

  // salvar título
  async function saveTitle() {
    setSavingTitle(true);
    try {
      const res = await fetch(`/api/classes/${classId}/chamadas/${seq}`, {
        method: "PATCH",
        headers: { "content-type": "application/json" },
        body: JSON.stringify({ title })
      });
      if (!res.ok) throw new Error("Erro ao salvar título");
    } catch (e:any) {
      alert(e.message || "Erro ao salvar título");
    } finally {
      setSavingTitle(false);
    }
  }

  // abrir conteúdo em nova aba
  function openContent() {
    window.open(`/classes/${classId}/conteudos/${seq}`, "_blank", "noopener,noreferrer");
  }

  // abrir todos os conteúdos
  function openAllContents() {
    window.location.href = `/classes/${classId}/conteudos`;
  }

  // adicionar aluno
  async function onAddStudent(e: React.FormEvent) {
    e.preventDefault();
    setAdding(true);
    try {
      const res = await fetch(`/api/classes/${classId}/students`, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify(addForm)
      });
      const data = await res.json();
      if (!res.ok || !data?.ok) {
        alert(data?.error || "Erro ao adicionar aluno");
      } else {
        setStudents((prev) => [data.student, ...prev]);
        setShowAdd(false);
        setAddForm({ name: "", cpf: "", contact: "" });
      }
    } catch {
      alert("Falha de rede");
    } finally {
      setAdding(false);
    }
  }

  // double click para editar
  function onDblClickStudent(st: Student) {
    setEditId(st.id);
    setEditForm({ name: st.name, contact: st.contact });
    setMoreId(null);
  }

  // salvar edição
  async function onSaveEdit() {
    if (!editId) return;
    setEditing(true);
    try {
      const res = await fetch(`/api/classes/${classId}/students/${editId}`, {
        method: "PATCH",
        headers: { "content-type": "application/json" },
        body: JSON.stringify(editForm)
      });
      const data = await res.json();
      if (!res.ok || !data?.ok) {
        alert(data?.error || "Erro ao salvar aluno");
      } else {
        setStudents((prev) => prev.map(s => s.id === editId ? data.student : s));
        setEditId(null);
      }
    } catch {
      alert("Falha de rede");
    } finally {
      setEditing(false);
    }
  }

  // excluir
  async function onDelete() {
    if (!editId) return;
    if (!confirm("Remover este aluno?")) return;
    try {
      const res = await fetch(`/api/classes/${classId}/students/${editId}`, { method: "DELETE" });
      const ok = res.ok;
      if (!ok) alert("Erro ao excluir");
      else setStudents(prev => prev.filter(s => s.id !== editId));
      setEditId(null);
    } catch {
      alert("Falha de rede");
    }
  }

  // importar
  async function onImportFile(e: React.ChangeEvent<HTMLInputElement>) {
    const file = e.target.files?.[0];
    if (!file) return;
    setImporting(true);
    setImportMsg(null);
    try {
      const fd = new FormData();
      fd.append("file", file);
      const res = await fetch(`/api/classes/${classId}/students/import`, { method:"POST", body: fd });
      const data = await res.json();
      if (!res.ok || !data?.ok) {
        setImportMsg(data?.error || "Falha ao importar");
      } else {
        setStudents(prev => [...data.students, ...prev]);
        setImportMsg(`Importados: ${data.createdCount}`);
      }
    } catch {
      setImportMsg("Falha de rede");
    } finally {
      setImporting(false);
      if (fileRef.current) fileRef.current.value = "";
    }
  }

  return (
    <main className="min-h-screen">
      {/* HERO */}
      <section className="bg-gradient-to-br from-[var(--color-brand-blue)]/90 to-[var(--color-brand-blue)] text-white">
        <div className="max-w-5xl mx-auto px-6 py-8">
          <div className="flex items-center justify-between gap-3">
            <div>
              <p className="text-xs/5 uppercase tracking-widest text-white/80">EDUCC</p>
              <h1 className="mt-1 text-2xl sm:text-3xl font-bold">
                {className} • Chamada #{seq}
              </h1>
            </div>
            <div className="flex gap-2">
              <Link href={`/classes/${classId}`} className="rounded-xl bg-white/10 px-4 py-2 text-sm backdrop-blur hover:bg-white/15">← Turma</Link>
              <button onClick={openAllContents} className="rounded-xl bg-white/10 px-4 py-2 text-sm backdrop-blur hover:bg-white/15">Todos os conteúdos</button>
              <button onClick={openContent} className="rounded-xl bg-white px-4 py-2 text-sm font-semibold text-[var(--color-brand-blue)] shadow-sm hover:shadow">Conteúdo</button>
            </div>
          </div>

          <div className="mt-5 grid gap-4">
            <div className="rounded-2xl bg-white/10 p-4 backdrop-blur">
              <label className="block text-sm text-white/90 mb-1">Título da aula</label>
              <div className="flex gap-2">
                <input
                  className="w-full rounded-xl px-4 py-2 bg-white text-[var(--color-brand-blue)] placeholder-gray-400"
                  value={title}
                  onChange={e=>setTitle(e.target.value)}
                  onBlur={saveTitle}
                  placeholder="Título da aula"
                />
                <button onClick={saveTitle} disabled={savingTitle} className="rounded-xl bg-white px-4 py-2 text-sm font-semibold text-[var(--color-brand-blue)] shadow-sm hover:shadow disabled:opacity-60">
                  {savingTitle ? "Salvando..." : "Salvar"}
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* BODY */}
      <section className="max-w-5xl mx-auto px-6 py-8 grid gap-6">
        {/* Alunos header + adicionar */}
        <div className="card p-6">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold">Alunos</h2>
            <div className="flex gap-2">
              <button onClick={()=>setShowAdd(true)} className="btn-primary">Adicionar aluno</button>
              <a href="/templates/students.csv" target="_blank" className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50">Modelo CSV</a>
              <a href="/templates/students.xlsx" target="_blank" className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50">Modelo XLSX</a>
              <label className="rounded-xl border px-3 py-2 text-sm hover:bg-gray-50 cursor-pointer">
                {importing ? "Importando..." : "Importar CSV/XLSX"}
                <input ref={fileRef} onChange={onImportFile} type="file" accept=".csv,.xlsx" className="hidden" />
              </label>
            </div>
          </div>
          {importMsg && <p className="text-sm mt-2 text-gray-600">{importMsg}</p>}

          {/* Lista com “gradiente” por item */}
          <ul className="mt-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
            {students.map((s) => {
              const isEditing = editId === s.id;
              const gradient = "bg-gradient-to-br from-[var(--color-brand-blue)]/10 to-[var(--color-brand-blue)]/5";
              return (
                <li key={s.id}>
                  <div
                    onDoubleClick={()=>onDblClickStudent(s)}
                    className={`rounded-xl p-4 border border-gray-200 hover:shadow transition ${gradient}`}
                  >
                    {!isEditing ? (
                      <>
                        <div className="font-semibold">{s.name}</div>
                        <div className="text-xs text-gray-600 mt-1">Dê dois cliques para editar</div>
                        <div className="mt-2">
                          <button
                            onClick={()=> setMoreId(moreId === s.id ? null : s.id)}
                            className="text-[var(--color-brand-blue)] text-sm hover:underline"
                          >
                            Mais informações
                          </button>
                          {moreId === s.id && (
                            <div className="text-sm text-gray-700 mt-2 space-y-1">
                              <div><b>CPF:</b> {s.cpf}</div>
                              <div><b>Contato:</b> {s.contact}</div>
                            </div>
                          )}
                        </div>
                      </>
                    ) : (
                      <div className="space-y-2">
                        <div>
                          <label className="block text-xs text-gray-600">Nome</label>
                          <input className="input w-full" value={editForm.name} onChange={e=>setEditForm(f=>({...f, name:e.target.value}))} />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-600">Contato</label>
                          <input className="input w-full" value={editForm.contact} onChange={e=>setEditForm(f=>({...f, contact:e.target.value}))} />
                        </div>
                        <div className="flex items-center gap-2">
                          <button onClick={onSaveEdit} disabled={editing} className="btn-primary">{editing ? "Salvando..." : "Salvar"}</button>
                          <button onClick={()=>setEditId(null)} className="rounded-xl px-3 py-2 text-sm border">Cancelar</button>
                          <button onClick={onDelete} className="rounded-xl px-3 py-2 text-sm border text-red-600">Excluir</button>
                        </div>
                      </div>
                    )}
                  </div>
                </li>
              );
            })}
          </ul>
        </div>

        {/* Modal inline de adicionar aluno */}
        {showAdd && (
          <div className="card p-6">
            <h3 className="font-semibold mb-3">Adicionar aluno</h3>
            <form onSubmit={onAddStudent} className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div className="sm:col-span-2">
                <label className="block text-sm mb-1">Nome</label>
                <input className="input w-full" required value={addForm.name} onChange={e=>setAddForm(f=>({...f, name:e.target.value}))} />
              </div>
              <div>
                <label className="block text-sm mb-1">CPF</label>
                <input className="input w-full" required value={addForm.cpf} onChange={e=>setAddForm(f=>({...f, cpf:e.target.value}))} placeholder="000.000.000-00" />
              </div>
              <div>
                <label className="block text-sm mb-1">Contato</label>
                <input className="input w-full" required value={addForm.contact} onChange={e=>setAddForm(f=>({...f, contact:e.target.value}))} placeholder="(11) 90000-0000" />
              </div>
              <div className="sm:col-span-2 flex gap-2">
                <button type="submit" disabled={adding} className="btn-primary">{adding ? "Salvando..." : "Salvar"}</button>
                <button type="button" onClick={()=>setShowAdd(false)} className="rounded-xl px-3 py-2 text-sm border">Cancelar</button>
              </div>
            </form>
          </div>
        )}
      </section>
    </main>
  );
}
